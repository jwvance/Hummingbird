C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYDMAC
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\CyDmac.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\CyDmac.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\D
                    -P8051\DP8051_Keil_951\Debug/CyDmac.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\CyDmac.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyDmac.c
   3          * Version 4.11
   4          *
   5          * Description:
   6          *  Provides an API for the DMAC component. The API includes functions for the
   7          *  DMA controller, DMA channels and Transfer Descriptors.
   8          *
   9          *  This API is the library version not the auto generated code that gets
  10          *  generated when the user places a DMA component on the schematic.
  11          *
  12          *  The auto generated code would use the APi's in this module.
  13          *
  14          * Note:
  15          *  This code is endian agnostic.
  16          *
  17          *  The Transfer Descriptor memory can be used as regular memory if the TD's are
  18          *  not being used.
  19          *
  20          *  This code uses the first byte of each TD to manage the free list of TD's.
  21          *  The user can overwrite this once the TD is allocated.
  22          *
  23          ********************************************************************************
  24          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  25          * You may use this file only in accordance with the license, terms, conditions,
  26          * disclaimers, and limitations in the end user license agreement accompanying
  27          * the software package with which this file was provided.
  28          *******************************************************************************/
  29          
  30          #include "CyDmac.h"
  31          
  32          
  33          /*******************************************************************************
  34          * The following variables are initialized from CyDmacConfigure() function that
  35          * is executed from initialize_psoc() at the early initialization stage.
  36          * In case of IAR EW IDE, initialize_psoc() is executed before the data sections
  37          * are initialized. To avoid zeroing, these variables should be initialized
  38          * properly during segments initialization as well.
  39          *******************************************************************************/
  40          static uint8  CyDmaTdCurrentNumber = CY_DMA_NUMBEROF_TDS;           /* Current Number of free elements on 
             -list */
  41          static uint8  CyDmaTdFreeIndex = (uint8)(CY_DMA_NUMBEROF_TDS - 1u); /* Index of first available TD */
  42          static uint32 CyDmaChannels = DMA_CHANNELS_USED__MASK0;              /* Bit map of DMA channel ownership *
             -/
  43          
  44          
  45          /*******************************************************************************
  46          * Function Name: CyDmacConfigure
  47          ********************************************************************************
  48          *
  49          * Summary:
  50          *  Creates a linked list of all the TDs to be allocated. This function is called
  51          *  by the startup code; you do not normally need to call it. You can call this
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 2   

  52          *  function if all of the DMA channels are inactive.
  53          *
  54          * Parameters:
  55          *  None
  56          *
  57          * Return:
  58          *  None
  59          *
  60          *******************************************************************************/
  61          void CyDmacConfigure(void) 
  62          {
  63   1          uint8 dmaIndex;
  64   1      
  65   1          /* Set TD list variables. */
  66   1          CyDmaTdFreeIndex     = (uint8)(CY_DMA_NUMBEROF_TDS - 1u);
  67   1          CyDmaTdCurrentNumber = CY_DMA_NUMBEROF_TDS;
  68   1      
  69   1          /* Make TD free list. */
  70   1          for(dmaIndex = (uint8)(CY_DMA_NUMBEROF_TDS - 1u); dmaIndex != 0u; dmaIndex--)
  71   1          {
  72   2              CY_DMA_TDMEM_STRUCT_PTR[dmaIndex].TD0[0u] = (uint8)(dmaIndex - 1u);
  73   2          }
  74   1      
  75   1          /* Make last one point to zero. */
  76   1          CY_DMA_TDMEM_STRUCT_PTR[dmaIndex].TD0[0u] = 0u;
  77   1      }
  78          
  79          
  80          /*******************************************************************************
  81          * Function Name: CyDmacError
  82          ********************************************************************************
  83          *
  84          * Summary:
  85          *  Returns errors of the last failed DMA transaction.
  86          *
  87          * Parameters:
  88          *  None
  89          *
  90          * Return:
  91          *  Errors of the last failed DMA transaction.
  92          *
  93          *  DMAC_PERIPH_ERR:
  94          *   Set to 1 when a peripheral responds to a bus transaction with an error
  95          *   response.
  96          *
  97          *  DMAC_UNPOP_ACC:
  98          *   Set to 1 when an access is attempted to an invalid address.
  99          *
 100          *  DMAC_BUS_TIMEOUT:
 101          *   Set to 1 when a bus timeout occurs. Cleared by writing a 1. Timeout values
 102          *   are determined by the BUS_TIMEOUT field in the PHUBCFG register.
 103          *
 104          * Theory:
 105          *  Once an error occurs the error bits are sticky and are only cleared by 
 106          *  writing 1 to the error register.
 107          *
 108          *******************************************************************************/
 109          uint8 CyDmacError(void) 
 110          {
 111   1          return((uint8)(((uint32) 0x0Fu) & *CY_DMA_ERR_PTR));
 112   1      }
 113          
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 3   

 114          
 115          /*******************************************************************************
 116          * Function Name: CyDmacClearError
 117          ********************************************************************************
 118          *
 119          * Summary:
 120          *  Clears the error bits in the error register of the DMAC.
 121          *
 122          * Parameters:
 123          * error:
 124          *   Clears the error bits in the DMAC error register.
 125          *
 126          *  DMAC_PERIPH_ERR:
 127          *   Set to 1 when a peripheral responds to a bus transaction with an error
 128          *   response.
 129          *
 130          *  DMAC_UNPOP_ACC:
 131          *   Set to 1 when an access is attempted to an invalid address.
 132          *
 133          *  DMAC_BUS_TIMEOUT:
 134          *   Set to 1 when a bus timeout occurs. Cleared by writing 1. Timeout values
 135          *   are determined by the BUS_TIMEOUT field in the PHUBCFG register.
 136          *
 137          * Return:
 138          *  None
 139          *
 140          * Theory:
 141          *  Once an error occurs the error bits are sticky and are only cleared by 
 142          *  writing 1 to the error register.
 143          *
 144          *******************************************************************************/
 145          void CyDmacClearError(uint8 error) 
 146          {
 147   1          *CY_DMA_ERR_PTR = (((uint32)0x0Fu) & ((uint32)error));
 148   1      }
 149          
 150          
 151          /*******************************************************************************
 152          * Function Name: CyDmacErrorAddress
 153          ********************************************************************************
 154          *
 155          * Summary:
 156          *  When DMAC_BUS_TIMEOUT, DMAC_UNPOP_ACC, and DMAC_PERIPH_ERR occur the
 157          *  address of the error is written to the error address register and can be read
 158          *  with this function.
 159          *
 160          *  If there are multiple errors, only the address of the first is saved.
 161          *
 162          * Parameters:
 163          *  None
 164          *
 165          * Return:
 166          *  The address that caused the error.
 167          *
 168          *******************************************************************************/
 169          uint32 CyDmacErrorAddress(void) 
 170          {
 171   1          return(CY_GET_REG32(CY_DMA_ERR_ADR_PTR));
 172   1      }
 173          
 174          
 175          /*******************************************************************************
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 4   

 176          * Function Name: CyDmaChAlloc
 177          ********************************************************************************
 178          *
 179          * Summary:
 180          *  Allocates a channel from the DMAC to be used in all functions that require a
 181          *  channel handle.
 182          *
 183          * Parameters:
 184          *  None
 185          *
 186          * Return:
 187          *  The allocated channel number. Zero is a valid channel number.
 188          *  DMA_INVALID_CHANNEL is returned if there are no channels available.
 189          *
 190          *******************************************************************************/
 191          uint8 CyDmaChAlloc(void) 
 192          {
 193   1          uint8 interruptState;
 194   1          uint8 dmaIndex;
 195   1          uint32 channel = 1u;
 196   1      
 197   1      
 198   1          /* Enter critical section! */
 199   1          interruptState = CyEnterCriticalSection();
 200   1      
 201   1          /* Look for free channel. */
 202   1          for(dmaIndex = 0u; dmaIndex < CY_DMA_NUMBEROF_CHANNELS; dmaIndex++)
 203   1          {
 204   2              if(0uL == (CyDmaChannels & channel))
 205   2              {
 206   3                  /* Mark channel as used. */
 207   3                  CyDmaChannels |= channel;
 208   3                  break;
 209   3              }
 210   2      
 211   2              channel <<= 1u;
 212   2          }
 213   1      
 214   1          if(dmaIndex >= CY_DMA_NUMBEROF_CHANNELS)
 215   1          {
 216   2              dmaIndex = CY_DMA_INVALID_CHANNEL;
 217   2          }
 218   1      
 219   1          /* Exit critical section! */
 220   1          CyExitCriticalSection(interruptState);
 221   1      
 222   1          return(dmaIndex);
 223   1      }
 224          
 225          
 226          /*******************************************************************************
 227          * Function Name: CyDmaChFree
 228          ********************************************************************************
 229          *
 230          * Summary:
 231          *  Frees a channel allocated by DmaChAlloc().
 232          *
 233          * Parameters:
 234          *  uint8 chHandle:
 235          *   The handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 236          *
 237          * Return:
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 5   

 238          *  CYRET_SUCCESS if successful.
 239          *  CYRET_BAD_PARAM if chHandle is invalid.
 240          *
 241          *******************************************************************************/
 242          cystatus CyDmaChFree(uint8 chHandle) 
 243          {
 244   1          cystatus status = CYRET_BAD_PARAM;
 245   1          uint8 interruptState;
 246   1      
 247   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 248   1          {
 249   2              /* Enter critical section */
 250   2              interruptState = CyEnterCriticalSection();
 251   2      
 252   2              /* Clear bit mask that keeps track of ownership. */
 253   2              CyDmaChannels &= ~(((uint32) 1u) << chHandle);
 254   2      
 255   2              /* Exit critical section */
 256   2              CyExitCriticalSection(interruptState);
 257   2              status = CYRET_SUCCESS;
 258   2          }
 259   1      
 260   1          return(status);
 261   1      }
 262          
 263          
 264          /*******************************************************************************
 265          * Function Name: CyDmaChEnable
 266          ********************************************************************************
 267          *
 268          * Summary:
 269          *  Enables the DMA channel. A software or hardware request still must happen
 270          *  before the channel is executed.
 271          *
 272          * Parameters:
 273          *  uint8 chHandle:
 274          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 275          *
 276          *  uint8 preserveTds:
 277          *   Preserves the original TD state when the TD has completed. This parameter
 278          *   applies to all TDs in the channel.
 279          *
 280          *   0 - When TD is completed, the DMAC leaves the TD configuration values in
 281          *   their current state, and does not restore them to their original state.
 282          *
 283          *   1 - When TD is completed, the DMAC restores the original configuration
 284          *   values of the TD.
 285          *
 286          *  When preserveTds is set, the TD slot that equals the channel number becomes
 287          *  RESERVED and that becomes where the working registers exist. So, for example,
 288          *  if you are using CH06 and preserveTds is set, you are not allowed to use TD
 289          *  slot 6. That is reclaimed by the DMA engine for its private use.
 290          *
 291          *  Note Do not chain back to a completed TD if the preserveTds for the channel
 292          *  is set to 0. When a TD has completed preserveTds for the channel set to 0,
 293          *  the transfer count will be at 0. If a TD with a transfer count of 0 is
 294          *  started, the TD will transfer an indefinite amount of data.
 295          *
 296          *  Take extra precautions when using the hardware request (DRQ) option when the
 297          *  preserveTds is set to 0, as you might be requesting the wrong data.
 298          *
 299          * Return:
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 6   

 300          *  CYRET_SUCCESS if successful.
 301          *  CYRET_BAD_PARAM if chHandle is invalid.
 302          *
 303          *******************************************************************************/
 304          cystatus CyDmaChEnable(uint8 chHandle, uint8 preserveTds) CYREENTRANT
 305          {
 306   1          cystatus status = CYRET_BAD_PARAM;
 307   1      
 308   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 309   1          {
 310   2              if (0u != preserveTds)
 311   2              {
 312   3                  /* Store intermediate TD states separately in CHn_SEP_TD0/1 to
 313   3                  *  preserve original TD chain
 314   3                  */
 315   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] |= CY_DMA_CH_BASIC_CFG_WORK_SEP;
 316   3              }
 317   2              else
 318   2              {
 319   3                  /* Store intermediate and final TD states on top of original TD chain */
 320   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] &= (uint8)(~CY_DMA_CH_BASIC_CFG_WORK_SEP);
 321   3              }
 322   2      
 323   2              /* Enable channel */
 324   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] |= CY_DMA_CH_BASIC_CFG_EN;
 325   2      
 326   2              status = CYRET_SUCCESS;
 327   2          }
 328   1      
 329   1          return(status);
 330   1      }
 331          
 332          
 333          /*******************************************************************************
 334          * Function Name: CyDmaChDisable
 335          ********************************************************************************
 336          *
 337          * Summary:
 338          *  Disables the DMA channel. Once this function is called, CyDmaChStatus() may
 339          *  be called to determine when the channel is disabled and which TDs were being
 340          *  executed.
 341          *
 342          *  If it is currently executing it will allow the current burst to finish
 343          *  naturally.
 344          *
 345          * Parameters:
 346          *  uint8 chHandle:
 347          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 348          *
 349          * Return:
 350          *  CYRET_SUCCESS if successful.
 351          *  CYRET_BAD_PARAM if chHandle is invalid.
 352          *
 353          *******************************************************************************/
 354          cystatus CyDmaChDisable(uint8 chHandle) CYREENTRANT
 355          {
 356   1          cystatus status = CYRET_BAD_PARAM;
 357   1      
 358   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 359   1          {
 360   2              /***********************************************************************
 361   2              * Should not change configuration information of a DMA channel when it
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 7   

 362   2              * is active (or vulnerable to becoming active).
 363   2              ***********************************************************************/
 364   2      
 365   2              /* Disable channel */
 366   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0] &= ((uint8) (~CY_DMA_CH_BASIC_CFG_EN));
 367   2      
 368   2              /* Store intermediate and final TD states on top of original TD chain */
 369   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0] &= ((uint8) (~CY_DMA_CH_BASIC_CFG_WORK_SEP));
 370   2              status = CYRET_SUCCESS;
 371   2          }
 372   1      
 373   1          return(status);
 374   1      }
 375          
 376          
 377          /*******************************************************************************
 378          * Function Name: CyDmaClearPendingDrq
 379          ********************************************************************************
 380          *
 381          * Summary:
 382          *  Clears pending the DMA data request.
 383          *
 384          * Parameters:
 385          *  uint8 chHandle:
 386          *   Handle to the dma channel.
 387          *
 388          * Return:
 389          *  CYRET_SUCCESS if successful.
 390          *  CYRET_BAD_PARAM if chHandle is invalid.
 391          *
 392          *******************************************************************************/
 393          cystatus CyDmaClearPendingDrq(uint8 chHandle) CYREENTRANT
 394          {
 395   1          cystatus status = CYRET_BAD_PARAM;
 396   1      
 397   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 398   1          {
 399   2              CY_DMA_CH_STRUCT_PTR[chHandle].action[0] |= CY_DMA_CPU_TERM_CHAIN;
 400   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0] |= 0x01u;
 401   2              status = CYRET_SUCCESS;
 402   2          }
 403   1      
 404   1          return(status);
 405   1      }
 406          
 407          
 408          /*******************************************************************************
 409          * Function Name: CyDmaChPriority
 410          ********************************************************************************
 411          *
 412          * Summary:
 413          *  Sets the priority of a DMA channel. You can use this function when you want
 414          *  to change the priority at run time. If the priority remains the same for a
 415          *  DMA channel, then you can configure the priority in the .cydwr file.
 416          *
 417          * Parameters:
 418          *  uint8 chHandle:
 419          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 420          *
 421          *  uint8 priority:
 422          *   Priority to set the channel to, 0 - 7.
 423          *
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 8   

 424          * Return:
 425          *  CYRET_SUCCESS if successful.
 426          *  CYRET_BAD_PARAM if chHandle is invalid.
 427          *
 428          *******************************************************************************/
 429          cystatus CyDmaChPriority(uint8 chHandle, uint8 priority) CYREENTRANT
 430          {
 431   1          uint8 value;
 432   1          cystatus status = CYRET_BAD_PARAM;
 433   1      
 434   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 435   1          {
 436   2              value = CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] & ((uint8)(~(0x0Eu)));
 437   2      
 438   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] = value | ((uint8) ((priority & 0x7u) << 0x01u));
 439   2      
 440   2              status = CYRET_SUCCESS;
 441   2          }
 442   1      
 443   1          return(status);
 444   1      }
 445          
 446          
 447          /*******************************************************************************
 448          * Function Name: CyDmaChSetExtendedAddress
 449          ********************************************************************************
 450          *
 451          * Summary:
 452          *  Sets the high 16 bits of the source and destination addresses for the DMA
 453          *  channel (valid for all TDs in the chain).
 454          *
 455          * Parameters:
 456          *  uint8 chHandle:
 457          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 458          *
 459          *  uint16 source:
 460          *   Upper 16 bit address of the DMA transfer source.
 461          *
 462          *  uint16 destination:
 463          *   Upper 16 bit address of the DMA transfer destination.
 464          *
 465          * Return:
 466          *  CYRET_SUCCESS if successful.
 467          *  CYRET_BAD_PARAM if chHandle is invalid.
 468          *
 469          *******************************************************************************/
 470          cystatus CyDmaChSetExtendedAddress(uint8 chHandle, uint16 source, uint16 destination) \
 471              CYREENTRANT
 472          {
 473   1          cystatus status = CYRET_BAD_PARAM;
 474   1          reg16 *convert;
 475   1      
 476   1          #if(CY_PSOC5)
              
                      /* 0x1FFF8000-0x1FFFFFFF needs to use alias at 0x20008000-0x2000FFFF */
                      if(source == 0x1FFFu)
                      {
                          source = 0x2000u;
                      }
              
                      if(destination == 0x1FFFu)
                      {
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 9   

                          destination = 0x2000u;
                      }
              
                  #endif  /* (CY_PSOC5) */
 490   1      
 491   1      
 492   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 493   1          {
 494   2              /* Set source address */
 495   2              convert = (reg16 *) &CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[0];
 496   2              CY_SET_REG16(convert, source);
 497   2      
 498   2              /* Set destination address */
 499   2              convert = (reg16 *) &CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[2u];
 500   2              CY_SET_REG16(convert, destination);
 501   2              status = CYRET_SUCCESS;
 502   2          }
 503   1      
 504   1          return(status);
 505   1      }
 506          
 507          
 508          /*******************************************************************************
 509          * Function Name: CyDmaChSetInitialTd
 510          ********************************************************************************
 511          *
 512          * Summary:
 513          *  Sets the initial TD to be executed for the channel when the CyDmaChEnable()
 514          *  function is called.
 515          *
 516          * Parameters:
 517          *  uint8 chHandle:
 518          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitialize().
 519          *
 520          *  uint8 startTd:
 521          *   Set the TD index as the first TD associated with the channel. Zero is
 522          *   a valid TD index.
 523          *
 524          * Return:
 525          *  CYRET_SUCCESS if successful.
 526          *  CYRET_BAD_PARAM if chHandle is invalid.
 527          *
 528          *******************************************************************************/
 529          cystatus CyDmaChSetInitialTd(uint8 chHandle, uint8 startTd) CYREENTRANT
 530          {
 531   1          cystatus status = CYRET_BAD_PARAM;
 532   1      
 533   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 534   1          {
 535   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_status[1u] = startTd;
 536   2              status = CYRET_SUCCESS;
 537   2          }
 538   1      
 539   1          return(status);
 540   1      }
 541          
 542          
 543          /*******************************************************************************
 544          * Function Name: CyDmaChSetRequest
 545          ********************************************************************************
 546          *
 547          * Summary:
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 10  

 548          *  Allows the caller to terminate a chain of TDs, terminate one TD, or create a
 549          *  direct request to start the DMA channel.
 550          *
 551          * Parameters:
 552          *  uint8 chHandle:
 553          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 554          *
 555          *  uint8 request:
 556          *   One of the following constants. Each of the constants is a three-bit value.
 557          *
 558          *   CPU_REQ         - Create a direct request to start the DMA channel
 559          *   CPU_TERM_TD     - Terminate one TD
 560          *   CPU_TERM_CHAIN  - Terminate a chain of TDs
 561          *
 562          * Return:
 563          *  CYRET_SUCCESS if successful.
 564          *  CYRET_BAD_PARAM if chHandle is invalid.
 565          *
 566          *******************************************************************************/
 567          cystatus CyDmaChSetRequest(uint8 chHandle, uint8 request) 
 568          {
 569   1          cystatus status = CYRET_BAD_PARAM;
 570   1      
 571   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 572   1          {
 573   2              CY_DMA_CH_STRUCT_PTR[chHandle].action[0u] |= (request & (CPU_REQ | CPU_TERM_TD | CPU_TERM_CHAIN));
 574   2              status = CYRET_SUCCESS;
 575   2          }
 576   1      
 577   1          return(status);
 578   1      }
 579          
 580          
 581          /*******************************************************************************
 582          * Function Name: CyDmaChGetRequest
 583          ********************************************************************************
 584          *
 585          * Summary:
 586          *  This function allows the caller of CyDmaChSetRequest() to determine if the
 587          *  request was completed.
 588          *
 589          * Parameters:
 590          *  uint8 chHandle:
 591          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 592          *
 593          * Return:
 594          *  Returns a three-bit field, corresponding to the three bits of the request,
 595          *  which describes the state of the previously posted request. If the value is
 596          *  zero, the request was completed. CY_DMA_INVALID_CHANNEL if the handle is
 597          *  invalid.
 598          *
 599          *******************************************************************************/
 600          cystatus CyDmaChGetRequest(uint8 chHandle) 
 601          {
 602   1          cystatus status = CY_DMA_INVALID_CHANNEL;
 603   1      
 604   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 605   1          {
 606   2              status = (cystatus) ((uint32)CY_DMA_CH_STRUCT_PTR[chHandle].action[0u] &
 607   2                                  (uint32)(CY_DMA_CPU_REQ | CY_DMA_CPU_TERM_TD | CY_DMA_CPU_TERM_CHAIN));
 608   2          }
 609   1      
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 11  

 610   1          return(status);
 611   1      }
 612          
 613          
 614          /*******************************************************************************
 615          * Function Name: CyDmaChStatus
 616          ********************************************************************************
 617          *
 618          * Summary:
 619          *  Determines the status of the DMA channel.
 620          *
 621          * Parameters:
 622          *  uint8 chHandle:
 623          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 624          *
 625          *  uint8 * currentTd:
 626          *   The address to store the index of the current TD. Can be NULL if the value
 627          *   is not needed.
 628          *
 629          *  uint8 * state:
 630          *   The address to store the state of the channel. Can be NULL if the value is
 631          *   not needed.
 632          *
 633          *   STATUS_TD_ACTIVE
 634          *    0: Channel is not currently being serviced by DMAC
 635          *    1: Channel is currently being serviced by DMAC
 636          *
 637          *   STATUS_CHAIN_ACTIVE
 638          *    0: TD chain is inactive; either no DMA requests have triggered a new chain
 639          *       or the previous chain has completed.
 640          *    1: TD chain has been triggered by a DMA request
 641          *
 642          * Return:
 643          *  CYRET_SUCCESS if successful.
 644          *  CYRET_BAD_PARAM if chHandle is invalid.
 645          *
 646          * Theory:
 647          *   The caller can check on the activity of the Current TD and the Chain.
 648          *
 649          *******************************************************************************/
 650          cystatus CyDmaChStatus(uint8 chHandle, uint8 * currentTd, uint8 * state) 
 651          {
 652   1          cystatus status = CYRET_BAD_PARAM;
 653   1      
 654   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 655   1          {
 656   2              if(NULL != currentTd)
 657   2              {
 658   3                  *currentTd = CY_DMA_CH_STRUCT_PTR[chHandle].basic_status[1] & 0x7Fu;
 659   3              }
 660   2      
 661   2              if(NULL != state)
 662   2              {
 663   3                  *state= CY_DMA_CH_STRUCT_PTR[chHandle].basic_status[0];
 664   3              }
 665   2      
 666   2              status = CYRET_SUCCESS;
 667   2          }
 668   1      
 669   1          return (status);
 670   1      }
 671          
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 12  

 672          
 673          /*******************************************************************************
 674          * Function Name: CyDmaChSetConfiguration
 675          ********************************************************************************
 676          *
 677          * Summary:
 678          * Sets configuration information of the channel.
 679          *
 680          * Parameters:
 681          *  uint8 chHandle:
 682          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitialize().
 683          *
 684          *  uint8 burstCount:
 685          *   Specifies the size of bursts (1 to 127) the data transfer should be divided
 686          *   into. If this value is zero then the whole transfer is done in one burst.
 687          *
 688          *  uint8 requestPerBurst:
 689          *   The whole of the data can be split into multiple bursts, if this is
 690          *   required to complete the transaction:
 691          *    0: All subsequent bursts after the first burst will be automatically
 692          *       requested and carried out
 693          *    1: All subsequent bursts after the first burst must also be individually
 694          *       requested.
 695          *
 696          *  uint8 tdDone0:
 697          *   Selects one of the TERMOUT0 interrupt lines to signal completion. The line
 698          *   connected to the nrq terminal will determine the TERMOUT0_SEL definition and
 699          *   should be used as supplied by cyfitter.h
 700          *
 701          *  uint8 tdDone1:
 702          *   Selects one of the TERMOUT1 interrupt lines to signal completion. The line
 703          *   connected to the nrq terminal will determine the TERMOUT1_SEL definition and
 704          *   should be used as supplied by cyfitter.h
 705          *
 706          *  uint8 tdStop:
 707          *   Selects one of the TERMIN interrupt lines to signal to the DMAC that the TD
 708          *   should terminate. The signal connected to the trq terminal will determine
 709          *   which TERMIN (termination request) is used.
 710          *
 711          * Return:
 712          *  CYRET_SUCCESS if successful.
 713          *  CYRET_BAD_PARAM if chHandle is invalid.
 714          *
 715          *******************************************************************************/
 716          cystatus CyDmaChSetConfiguration(uint8 chHandle, uint8 burstCount, uint8 requestPerBurst,
 717                                           uint8 tdDone0, uint8 tdDone1, uint8 tdStop) CYREENTRANT
 718          {
 719   1          cystatus status = CYRET_BAD_PARAM;
 720   1      
 721   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 722   1          {
 723   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[0] = (burstCount & 0x7Fu) | ((uint8)((requestPerBurst & 0x
             -1u) << 7u));
 724   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[1] = ((uint8)((tdDone1 & 0xFu) << 4u)) | (tdDone0 & 0xFu);
 725   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[2] = 0x0Fu & tdStop;
 726   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[3] = 0u; /* burstcount_remain. */
 727   2      
 728   2              status = CYRET_SUCCESS;
 729   2          }
 730   1      
 731   1          return (status);
 732   1      }
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 13  

 733          
 734          
 735          /*******************************************************************************
 736          * Function Name: CyDmaTdAllocate
 737          ********************************************************************************
 738          *
 739          * Summary:
 740          *  Allocates a TD for use with an allocated DMA channel.
 741          *
 742          * Parameters:
 743          *  None
 744          *
 745          * Return:
 746          *  Zero-based index of the TD to be used by the caller. Since there are 128 TDs
 747          *  minus the reserved TDs (0 to 23), the value returned would range from 24 to
 748          *  127 not 24 to 128. DMA_INVALID_TD is returned if there are no free TDs
 749          *  available.
 750          *
 751          *******************************************************************************/
 752          uint8 CyDmaTdAllocate(void) CYREENTRANT
 753          {
 754   1          uint8 interruptState;
 755   1          uint8 element = CY_DMA_INVALID_TD;
 756   1      
 757   1          /* Enter critical section! */
 758   1          interruptState = CyEnterCriticalSection();
 759   1      
 760   1          if(CyDmaTdCurrentNumber > NUMBEROF_CHANNELS)
 761   1          {
 762   2              /* Get pointer to Next available. */
 763   2              element = CyDmaTdFreeIndex;
 764   2      
 765   2              /* Decrement the count. */
 766   2              CyDmaTdCurrentNumber--;
 767   2      
 768   2              /* Update next available pointer. */
 769   2              CyDmaTdFreeIndex = CY_DMA_TDMEM_STRUCT_PTR[element].TD0[0];
 770   2          }
 771   1      
 772   1          /* Exit critical section! */
 773   1          CyExitCriticalSection(interruptState);
 774   1      
 775   1          return(element);
 776   1      }
 777          
 778          
 779          /*******************************************************************************
 780          * Function Name: CyDmaTdFree
 781          ********************************************************************************
 782          *
 783          * Summary:
 784          *  Returns a TD to the free list.
 785          *
 786          * Parameters:
 787          *  uint8 tdHandle:
 788          *   The TD handle returned by the CyDmaTdAllocate().
 789          *
 790          * Return:
 791          *  None
 792          *
 793          *******************************************************************************/
 794          void CyDmaTdFree(uint8 tdHandle) 
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 14  

 795          {
 796   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
 797   1          {
 798   2              /* Enter critical section! */
 799   2              uint8 interruptState = CyEnterCriticalSection();
 800   2      
 801   2              /* Get pointer to Next available. */
 802   2              CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[0u] = CyDmaTdFreeIndex;
 803   2      
 804   2              /* Set new Next Available. */
 805   2              CyDmaTdFreeIndex = tdHandle;
 806   2      
 807   2              /* Keep track of how many left. */
 808   2              CyDmaTdCurrentNumber++;
 809   2      
 810   2              /* Exit critical section! */
 811   2              CyExitCriticalSection(interruptState);
 812   2          }
 813   1      }
 814          
 815          
 816          /*******************************************************************************
 817          * Function Name: CyDmaTdFreeCount
 818          ********************************************************************************
 819          *
 820          * Summary:
 821          *  Returns the number of free TDs available to be allocated.
 822          *
 823          * Parameters:
 824          *  None
 825          *
 826          * Return:
 827          *  The number of free TDs.
 828          *
 829          *******************************************************************************/
 830          uint8 CyDmaTdFreeCount(void) 
 831          {
 832   1          return(CyDmaTdCurrentNumber - CY_DMA_NUMBEROF_CHANNELS);
 833   1      }
 834          
 835          
 836          /*******************************************************************************
 837          * Function Name: CyDmaTdSetConfiguration
 838          ********************************************************************************
 839          *
 840          * Summary:
 841          *  Configures the TD.
 842          *
 843          * Parameters:
 844          *  uint8 tdHandle:
 845          *   A handle previously returned by CyDmaTdAlloc().
 846          *
 847          *  uint16 transferCount:
 848          *   The size of the data transfer (in bytes) for this TD. A size of zero will
 849          *   cause the transfer to continue indefinitely. This parameter is limited to
 850          *   4095 bytes; the TD is not initialized at all when a higher value is passed.
 851          *
 852          *  uint8 nextTd:
 853          *   Zero based index of the next Transfer Descriptor in the TD chain. Zero is a
 854          *   valid pointer to the next TD; DMA_END_CHAIN_TD is the end of the chain.
 855          *   DMA_DISABLE_TD indicates an end to the chain and the DMA is disabled. No
 856          *   further TDs are fetched. DMA_DISABLE_TD is only supported on PSoC3 and
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 15  

 857          *   PSoC 5LP silicons.
 858          *
 859          *  uint8 configuration:
 860          *   Stores the Bit field of configuration bits.
 861          *
 862          *   CY_DMA_TD_SWAP_EN        - Perform endian swap
 863          *
 864          *   CY_DMA_TD_SWAP_SIZE4     - Swap size = 4 bytes
 865          *
 866          *   CY_DMA_TD_AUTO_EXEC_NEXT - The next TD in the chain will trigger
 867          *                              automatically when the current TD completes.
 868          *
 869          *   CY_DMA_TD_TERMIN_EN      - Terminate this TD if a positive edge on the trq
 870          *                              input line occurs. The positive edge must occur
 871          *                              during a burst. That is the only time the DMAC
 872          *                              will listen for it.
 873          *
 874          *   DMA__TD_TERMOUT_EN       - When this TD completes, the TERMOUT signal will
 875          *                              generate a pulse. Note that this option is
 876          *                              instance specific with the instance name followed
 877          *                              by two underscores. In this example, the instance
 878          *                              name is DMA.
 879          *
 880          *   CY_DMA_TD_INC_DST_ADR    - Increment DST_ADR according to the size of each
 881          *                              data transaction in the burst.
 882          *
 883          *   CY_DMA_TD_INC_SRC_ADR    - Increment SRC_ADR according to the size of each
 884          *                              data transaction in the burst.
 885          *
 886          * Return:
 887          *  CYRET_SUCCESS if successful.
 888          *  CYRET_BAD_PARAM if tdHandle or transferCount is invalid.
 889          *
 890          *******************************************************************************/
 891          cystatus CyDmaTdSetConfiguration(uint8 tdHandle, uint16 transferCount, uint8 nextTd, uint8 configuration) 
             -\
 892              CYREENTRANT
 893          {
 894   1          cystatus status = CYRET_BAD_PARAM;
 895   1      
 896   1          if((tdHandle < CY_DMA_NUMBEROF_TDS) && (0u == (0xF000u & transferCount)))
 897   1          {
 898   2              /* Set 12 bits transfer count. */
 899   2              reg16 *convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[0u];
 900   2              CY_SET_REG16(convert, transferCount);
 901   2      
 902   2              /* Set Next TD pointer. */
 903   2              CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[2u] = nextTd;
 904   2      
 905   2              /* Configure the TD */
 906   2              CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[3u] = configuration;
 907   2      
 908   2              status = CYRET_SUCCESS;
 909   2          }
 910   1      
 911   1          return(status);
 912   1      }
 913          
 914          
 915          /*******************************************************************************
 916          * Function Name: CyDmaTdGetConfiguration
 917          ********************************************************************************
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 16  

 918          *
 919          * Summary:
 920          *  Retrieves the configuration of the TD. If a NULL pointer is passed as a
 921          *  parameter, that parameter is skipped. You may request only the values you are
 922          *  interested in.
 923          *
 924          * Parameters:
 925          *  uint8 tdHandle:
 926          *   A handle previously returned by CyDmaTdAlloc().
 927          *
 928          *  uint16 * transferCount:
 929          *   The address to store the size of the data transfer (in bytes) for this TD.
 930          *   A size of zero could indicate that the TD has completed its transfer, or
 931          *   that the TD is doing an indefinite transfer.
 932          *
 933          *  uint8 * nextTd:
 934          *   The address to store the index of the next TD in the TD chain.
 935          *
 936          *  uint8 * configuration:
 937          *   The address to store the Bit field of configuration bits.
 938          *   See CyDmaTdSetConfiguration() function description.
 939          *
 940          * Return:
 941          *  CYRET_SUCCESS if successful.
 942          *  CYRET_BAD_PARAM if tdHandle is invalid.
 943          *
 944          * Side Effects:
 945          *  If TD has a transfer count of N and is executed, the transfer count becomes
 946          *  0. If it is reexecuted, the Transfer count of zero will be interpreted as a
 947          *  request for indefinite transfer. Be careful when requesting TD with a
 948          *  transfer count of zero.
 949          *
 950          *******************************************************************************/
 951          cystatus CyDmaTdGetConfiguration(uint8 tdHandle, uint16 * transferCount, uint8 * nextTd, uint8 * configura
             -tion) \
 952              
 953          {
 954   1          cystatus status = CYRET_BAD_PARAM;
 955   1      
 956   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
 957   1          {
 958   2              /* If we have pointer */
 959   2              if(NULL != transferCount)
 960   2              {
 961   3                  /* Get 12 bits of transfer count */
 962   3                  reg16 *convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[0];
 963   3                  *transferCount = 0x0FFFu & CY_GET_REG16(convert);
 964   3              }
 965   2      
 966   2              /* If we have pointer */
 967   2              if(NULL != nextTd)
 968   2              {
 969   3                  /* Get Next TD pointer */
 970   3                  *nextTd = CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[2u];
 971   3              }
 972   2      
 973   2              /* If we have pointer */
 974   2              if(NULL != configuration)
 975   2              {
 976   3                  /* Get configuration TD */
 977   3                  *configuration = CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[3u];
 978   3              }
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 17  

 979   2      
 980   2              status = CYRET_SUCCESS;
 981   2          }
 982   1      
 983   1          return(status);
 984   1      }
 985          
 986          
 987          /*******************************************************************************
 988          * Function Name: CyDmaTdSetAddress
 989          ********************************************************************************
 990          *
 991          * Summary:
 992          *  Sets the lower 16 bits of the source and destination addresses for this TD
 993          *  only.
 994          *
 995          * Parameters:
 996          *  uint8 tdHandle:
 997          *   A handle previously returned by CyDmaTdAlloc().
 998          *
 999          *  uint16 source:
1000          *   The lower 16 address bits of the source of the data transfer.
1001          *
1002          *  uint16 destination:
1003          *   The lower 16 address bits of the destination of the data transfer.
1004          *
1005          * Return:
1006          *  CYRET_SUCCESS if successful.
1007          *  CYRET_BAD_PARAM if tdHandle is invalid.
1008          *
1009          *******************************************************************************/
1010          cystatus CyDmaTdSetAddress(uint8 tdHandle, uint16 source, uint16 destination) CYREENTRANT
1011          {
1012   1          cystatus status = CYRET_BAD_PARAM;
1013   1          reg16 *convert;
1014   1      
1015   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
1016   1          {
1017   2              /* Set source address */
1018   2              convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[0u];
1019   2              CY_SET_REG16(convert, source);
1020   2      
1021   2              /* Set destination address */
1022   2              convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[2u];
1023   2              CY_SET_REG16(convert, destination);
1024   2      
1025   2              status = CYRET_SUCCESS;
1026   2          }
1027   1      
1028   1          return(status);
1029   1      }
1030          
1031          
1032          /*******************************************************************************
1033          * Function Name: CyDmaTdGetAddress
1034          ********************************************************************************
1035          *
1036          * Summary:
1037          *  Retrieves the lower 16 bits of the source and/or destination addresses for
1038          *  this TD only. If NULL is passed for a pointer parameter, that value is
1039          *  skipped. You may request only the values of interest.
1040          *
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 18  

1041          * Parameters:
1042          *  uint8 tdHandle:
1043          *   A handle previously returned by CyDmaTdAlloc().
1044          *
1045          *  uint16 * source:
1046          *   The address to store the lower 16 address bits of the source of the data
1047          *   transfer.
1048          *
1049          *  uint16 * destination:
1050          *   The address to store the lower 16 address bits of the destination of the
1051          *   data transfer.
1052          *
1053          * Return:
1054          *  CYRET_SUCCESS if successful.
1055          *  CYRET_BAD_PARAM if tdHandle is invalid.
1056          *
1057          *******************************************************************************/
1058          cystatus CyDmaTdGetAddress(uint8 tdHandle, uint16 * source, uint16 * destination) 
1059          {
1060   1          cystatus status = CYRET_BAD_PARAM;
1061   1          reg16 *convert;
1062   1      
1063   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
1064   1          {
1065   2              /* If we have a pointer. */
1066   2              if(NULL != source)
1067   2              {
1068   3                  /* Get source address */
1069   3                  convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[0u];
1070   3                  *source = CY_GET_REG16(convert);
1071   3              }
1072   2      
1073   2              /* If we have a pointer. */
1074   2              if(NULL != destination)
1075   2              {
1076   3                  /* Get Destination address. */
1077   3                  convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[2u];
1078   3                  *destination = CY_GET_REG16(convert);
1079   3              }
1080   2      
1081   2              status = CYRET_SUCCESS;
1082   2          }
1083   1      
1084   1          return(status);
1085   1      }
1086          
1087          
1088          /*******************************************************************************
1089          * Function Name: CyDmaChRoundRobin
1090          ********************************************************************************
1091          *
1092          * Summary:
1093          *  Either enables or disables the Round-Robin scheduling enforcement algorithm.
1094          *  Within a priority level a Round-Robin fairness algorithm is enforced.
1095          *
1096          * Parameters:
1097          *  uint8 chHandle:
1098          *   A handle previously returned by CyDmaChAlloc() or Dma_DmaInitialize().
1099          *
1100          *  uint8 enableRR:
1101          *   0: Disable Round-Robin fairness algorithm
1102          *   1: Enable Round-Robin fairness algorithm
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 19  

1103          *
1104          * Return:
1105          *  CYRET_SUCCESS if successful.
1106          *  CYRET_BAD_PARAM if chHandle is invalid.
1107          *
1108          *******************************************************************************/
1109          cystatus CyDmaChRoundRobin(uint8 chHandle, uint8 enableRR) 
1110          {
1111   1          cystatus status = CYRET_BAD_PARAM;
1112   1      
1113   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
1114   1          {
1115   2              if (0u != enableRR)
1116   2              {
1117   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] |= (uint8)CY_DMA_ROUND_ROBIN_ENABLE;
1118   3              }
1119   2              else
1120   2              {
1121   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] &= (uint8)(~CY_DMA_ROUND_ROBIN_ENABLE);
1122   3              }
1123   2      
1124   2              status = CYRET_SUCCESS;
1125   2          }
1126   1      
1127   1          return(status);
1128   1      }
1129          
1130          
1131          /* [] END OF FILE */
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 20  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyDmacConfigure (BEGIN)
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 66
0000 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
0003 747F              MOV     A,#07FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
0006 900000      R     MOV     DPTR,#CyDmaTdCurrentNumber
0009 7480              MOV     A,#080H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
000C 900000      R     MOV     DPTR,#dmaIndex
000F 747F              MOV     A,#07FH
0011 F0                MOVX    @DPTR,A
0012         ?C0001:
0012 900000      R     MOV     DPTR,#dmaIndex
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 6021              JZ      ?C0002
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
001A 900000      R     MOV     DPTR,#dmaIndex
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 14                DEC     A
0021 FF                MOV     R7,A
0022 900000      R     MOV     DPTR,#dmaIndex
0025 E0                MOVX    A,@DPTR
0026 FE                MOV     R6,A
0027 75F008            MOV     B,#08H
002A EE                MOV     A,R6
002B 907800            MOV     DPTR,#07800H
002E 120000      E     LCALL   ?C?OFFXADD
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
0033 900000      R     MOV     DPTR,#dmaIndex
0036 E0                MOVX    A,@DPTR
0037 14                DEC     A
0038 F0                MOVX    @DPTR,A
0039 80D7              SJMP    ?C0001
003B         ?C0002:
                                           ; SOURCE LINE # 76
003B 900000      R     MOV     DPTR,#dmaIndex
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 75F008            MOV     B,#08H
0043 EF                MOV     A,R7
0044 907800            MOV     DPTR,#07800H
0047 120000      E     LCALL   ?C?OFFXADD
004A E4                CLR     A
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
004C 22                RET     
             ; FUNCTION CyDmacConfigure (END)

C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 21  

             ; FUNCTION CyDmacError (BEGIN)
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
0000 907004            MOV     DPTR,#07004H
0003 120000      E     LCALL   ?C?LLDXDATA
0006 EF                MOV     A,R7
0007 540F              ANL     A,#0FH
0009 FF                MOV     R7,A
000A EE                MOV     A,R6
000B 5400              ANL     A,#00H
000D FE                MOV     R6,A
000E ED                MOV     A,R5
000F 5400              ANL     A,#00H
0011 FD                MOV     R5,A
0012 EC                MOV     A,R4
0013 5400              ANL     A,#00H
0015 FC                MOV     R4,A
                                           ; SOURCE LINE # 112
0016         ?C0005:
0016 22                RET     
             ; FUNCTION CyDmacError (END)

             ; FUNCTION _CyDmacClearError (BEGIN)
                                           ; SOURCE LINE # 145
0000 900000      R     MOV     DPTR,#error
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
0005 900000      R     MOV     DPTR,#error
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A E4                CLR     A
000B FC                MOV     R4,A
000C FD                MOV     R5,A
000D FE                MOV     R6,A
000E EF                MOV     A,R7
000F 540F              ANL     A,#0FH
0011 FF                MOV     R7,A
0012 EE                MOV     A,R6
0013 5400              ANL     A,#00H
0015 FE                MOV     R6,A
0016 ED                MOV     A,R5
0017 5400              ANL     A,#00H
0019 FD                MOV     R5,A
001A EC                MOV     A,R4
001B 5400              ANL     A,#00H
001D FC                MOV     R4,A
001E 907004            MOV     DPTR,#07004H
0021 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 148
0024 22                RET     
             ; FUNCTION _CyDmacClearError (END)

             ; FUNCTION CyDmacErrorAddress (BEGIN)
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0000 7B02              MOV     R3,#02H
0002 7A70              MOV     R2,#070H
0004 7908              MOV     R1,#08H
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 22  

0006 120000      E     LCALL   _cyread32_nodpx
                                           ; SOURCE LINE # 172
0009         ?C0007:
0009 22                RET     
             ; FUNCTION CyDmacErrorAddress (END)

             ; FUNCTION CyDmaChAlloc (BEGIN)
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 195
0000 7F01              MOV     R7,#01H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#channel
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 199
000E 120000      E     LCALL   CyEnterCriticalSection
0011 900000      R     MOV     DPTR,#interruptState
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0016 900000      R     MOV     DPTR,#dmaIndex
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
001B         ?C0008:
001B 900000      R     MOV     DPTR,#dmaIndex
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 C3                CLR     C
0022 9418              SUBB    A,#018H
0024 504D              JNC     ?C0009
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
0026 900000      R     MOV     DPTR,#channel
0029 120000      E     LCALL   ?C?LLDXDATA
002C 900000      R     MOV     DPTR,#CyDmaChannels
002F 120000      E     LCALL   ?C?LLDXDATA0
0032 120000      E     LCALL   ?C?LAND
0035 7B00              MOV     R3,#00H
0037 7A00              MOV     R2,#00H
0039 7900              MOV     R1,#00H
003B 7800              MOV     R0,#00H
003D C3                CLR     C
003E 120000      E     LCALL   ?C?ULCMP
0041 7017              JNZ     ?C0011
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 207
0043 900000      R     MOV     DPTR,#CyDmaChannels
0046 120000      E     LCALL   ?C?LLDXDATA
0049 900000      R     MOV     DPTR,#channel
004C 120000      E     LCALL   ?C?LLDXDATA0
004F 120000      E     LCALL   ?C?LOR
0052 900000      R     MOV     DPTR,#CyDmaChannels
0055 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 208
0058 8019              SJMP    ?C0009
                                           ; SOURCE LINE # 209
005A         ?C0011:
                                           ; SOURCE LINE # 211
005A 900000      R     MOV     DPTR,#channel
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 23  

005D 120000      E     LCALL   ?C?LLDXDATA
0060 7801              MOV     R0,#01H
0062 120000      E     LCALL   ?C?LSHL
0065 900000      R     MOV     DPTR,#channel
0068 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 212
006B 900000      R     MOV     DPTR,#dmaIndex
006E E0                MOVX    A,@DPTR
006F 04                INC     A
0070 F0                MOVX    @DPTR,A
0071 80A8              SJMP    ?C0008
0073         ?C0009:
                                           ; SOURCE LINE # 214
0073 900000      R     MOV     DPTR,#dmaIndex
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 C3                CLR     C
007A 9418              SUBB    A,#018H
007C 4006              JC      ?C0012
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
007E 900000      R     MOV     DPTR,#dmaIndex
0081 74FF              MOV     A,#0FFH
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0084         ?C0012:
                                           ; SOURCE LINE # 220
0084 900000      R     MOV     DPTR,#interruptState
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 222
008C 900000      R     MOV     DPTR,#dmaIndex
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
                                           ; SOURCE LINE # 223
0091         ?C0013:
0091 22                RET     
             ; FUNCTION CyDmaChAlloc (END)

             ; FUNCTION _CyDmaChFree (BEGIN)
                                           ; SOURCE LINE # 242
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
0005 900000      R     MOV     DPTR,#status
0008 7401              MOV     A,#01H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
000B 900000      R     MOV     DPTR,#chHandle
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 C3                CLR     C
0012 9418              SUBB    A,#018H
0014 5051              JNC     ?C0014
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 250
0016 120000      E     LCALL   CyEnterCriticalSection
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 24  

0019 900000      R     MOV     DPTR,#interruptState
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
001E 900000      R     MOV     DPTR,#CyDmaChannels
0021 120000      E     LCALL   ?C?LLDXDATA
0024 C004              PUSH    AR4
0026 C005              PUSH    AR5
0028 C006              PUSH    AR6
002A C007              PUSH    AR7
002C 7F01              MOV     R7,#01H
002E 7E00              MOV     R6,#00H
0030 7D00              MOV     R5,#00H
0032 7C00              MOV     R4,#00H
0034 900000      R     MOV     DPTR,#chHandle
0037 E0                MOVX    A,@DPTR
0038 F9                MOV     R1,A
0039 A801              MOV     R0,AR1
003B 120000      E     LCALL   ?C?LSHL
003E 120000      E     LCALL   ?C?LNOT
0041 A804              MOV     R0,AR4
0043 A905              MOV     R1,AR5
0045 AA06              MOV     R2,AR6
0047 AB07              MOV     R3,AR7
0049 D007              POP     AR7
004B D006              POP     AR6
004D D005              POP     AR5
004F D004              POP     AR4
0051 120000      E     LCALL   ?C?LAND
0054 900000      R     MOV     DPTR,#CyDmaChannels
0057 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 256
005A 900000      R     MOV     DPTR,#interruptState
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 257
0062 900000      R     MOV     DPTR,#status
0065 E4                CLR     A
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0067         ?C0014:
                                           ; SOURCE LINE # 260
0067 900000      R     MOV     DPTR,#status
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
                                           ; SOURCE LINE # 261
006C         ?C0015:
006C 22                RET     
             ; FUNCTION _CyDmaChFree (END)

             ; FUNCTION _?CyDmaChEnable (BEGIN)
                                           ; SOURCE LINE # 304
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 90FFFF            MOV     DPTR,#0FFFFH
000B 120000      E     LCALL   ?C?ADDXBP
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
0010 90FFFF            MOV     DPTR,#0FFFFH
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 25  

0013 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 306
0016 850083      E     MOV     DPH,?C_XBP
0019 850082      E     MOV     DPL,?C_XBP+01H
001C 7401              MOV     A,#01H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
001F 850083      E     MOV     DPH,?C_XBP
0022 850082      E     MOV     DPL,?C_XBP+01H
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 C3                CLR     C
002A 9418              SUBB    A,#018H
002C 5068              JNC     ?C0016
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
002E 850083      E     MOV     DPH,?C_XBP
0031 850082      E     MOV     DPL,?C_XBP+01H
0034 A3                INC     DPTR
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 601D              JZ      ?C0017
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 315
003B 850083      E     MOV     DPH,?C_XBP
003E 850082      E     MOV     DPL,?C_XBP+01H
0041 A3                INC     DPTR
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 75F010            MOV     B,#010H
0047 EF                MOV     A,R7
0048 907010            MOV     DPTR,#07010H
004B 120000      E     LCALL   ?C?OFFXADD
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 4420              ORL     A,#020H
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0056 801B              SJMP    ?C0018
0058         ?C0017:
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 320
0058 850083      E     MOV     DPH,?C_XBP
005B 850082      E     MOV     DPL,?C_XBP+01H
005E A3                INC     DPTR
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 75F010            MOV     B,#010H
0064 EF                MOV     A,R7
0065 907010            MOV     DPTR,#07010H
0068 120000      E     LCALL   ?C?OFFXADD
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D EF                MOV     A,R7
006E 54DF              ANL     A,#0DFH
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 26  

0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
0073         ?C0018:
                                           ; SOURCE LINE # 324
0073 850083      E     MOV     DPH,?C_XBP
0076 850082      E     MOV     DPL,?C_XBP+01H
0079 A3                INC     DPTR
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C 75F010            MOV     B,#010H
007F EF                MOV     A,R7
0080 907010            MOV     DPTR,#07010H
0083 120000      E     LCALL   ?C?OFFXADD
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 EF                MOV     A,R7
0089 4401              ORL     A,#01H
008B FF                MOV     R7,A
008C EF                MOV     A,R7
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
008E 850083      E     MOV     DPH,?C_XBP
0091 850082      E     MOV     DPL,?C_XBP+01H
0094 E4                CLR     A
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
0096         ?C0016:
                                           ; SOURCE LINE # 329
0096 850083      E     MOV     DPH,?C_XBP
0099 850082      E     MOV     DPL,?C_XBP+01H
009C E0                MOVX    A,@DPTR
009D FF                MOV     R7,A
                                           ; SOURCE LINE # 330
009E         ?C0019:
009E 900003            MOV     DPTR,#03H
00A1 120000      E     LCALL   ?C?ADDXBP
00A4 22                RET     
             ; FUNCTION _?CyDmaChEnable (END)

             ; FUNCTION _?CyDmaChDisable (BEGIN)
                                           ; SOURCE LINE # 354
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 90FFFF            MOV     DPTR,#0FFFFH
000B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 356
000E 850083      E     MOV     DPH,?C_XBP
0011 850082      E     MOV     DPL,?C_XBP+01H
0014 7401              MOV     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
0017 850083      E     MOV     DPH,?C_XBP
001A 850082      E     MOV     DPL,?C_XBP+01H
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 C3                CLR     C
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 27  

0022 9418              SUBB    A,#018H
0024 503E              JNC     ?C0020
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 366
0026 850083      E     MOV     DPH,?C_XBP
0029 850082      E     MOV     DPL,?C_XBP+01H
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 75F010            MOV     B,#010H
0032 EF                MOV     A,R7
0033 907010            MOV     DPTR,#07010H
0036 120000      E     LCALL   ?C?OFFXADD
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 54FE              ANL     A,#0FEH
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
0041 850083      E     MOV     DPH,?C_XBP
0044 850082      E     MOV     DPL,?C_XBP+01H
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A 75F010            MOV     B,#010H
004D EF                MOV     A,R7
004E 907010            MOV     DPTR,#07010H
0051 120000      E     LCALL   ?C?OFFXADD
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 EF                MOV     A,R7
0057 54DF              ANL     A,#0DFH
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
005C 850083      E     MOV     DPH,?C_XBP
005F 850082      E     MOV     DPL,?C_XBP+01H
0062 E4                CLR     A
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
0064         ?C0020:
                                           ; SOURCE LINE # 373
0064 850083      E     MOV     DPH,?C_XBP
0067 850082      E     MOV     DPL,?C_XBP+01H
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
                                           ; SOURCE LINE # 374
006C         ?C0021:
006C 900002            MOV     DPTR,#02H
006F 120000      E     LCALL   ?C?ADDXBP
0072 22                RET     
             ; FUNCTION _?CyDmaChDisable (END)

             ; FUNCTION _?CyDmaClearPendingDrq (BEGIN)
                                           ; SOURCE LINE # 393
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 28  

0008 90FFFF            MOV     DPTR,#0FFFFH
000B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 395
000E 850083      E     MOV     DPH,?C_XBP
0011 850082      E     MOV     DPL,?C_XBP+01H
0014 7401              MOV     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
0017 850083      E     MOV     DPH,?C_XBP
001A 850082      E     MOV     DPL,?C_XBP+01H
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 C3                CLR     C
0022 9418              SUBB    A,#018H
0024 503E              JNC     ?C0022
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0026 850083      E     MOV     DPH,?C_XBP
0029 850082      E     MOV     DPL,?C_XBP+01H
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 75F010            MOV     B,#010H
0032 EF                MOV     A,R7
0033 907014            MOV     DPTR,#07014H
0036 120000      E     LCALL   ?C?OFFXADD
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 4404              ORL     A,#04H
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0041 850083      E     MOV     DPH,?C_XBP
0044 850082      E     MOV     DPL,?C_XBP+01H
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A 75F010            MOV     B,#010H
004D EF                MOV     A,R7
004E 907010            MOV     DPTR,#07010H
0051 120000      E     LCALL   ?C?OFFXADD
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 EF                MOV     A,R7
0057 4401              ORL     A,#01H
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
005C 850083      E     MOV     DPH,?C_XBP
005F 850082      E     MOV     DPL,?C_XBP+01H
0062 E4                CLR     A
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
0064         ?C0022:
                                           ; SOURCE LINE # 404
0064 850083      E     MOV     DPH,?C_XBP
0067 850082      E     MOV     DPL,?C_XBP+01H
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 29  

006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
                                           ; SOURCE LINE # 405
006C         ?C0023:
006C 900002            MOV     DPTR,#02H
006F 120000      E     LCALL   ?C?ADDXBP
0072 22                RET     
             ; FUNCTION _?CyDmaClearPendingDrq (END)

             ; FUNCTION _?CyDmaChPriority (BEGIN)
                                           ; SOURCE LINE # 429
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 90FFFF            MOV     DPTR,#0FFFFH
000B 120000      E     LCALL   ?C?ADDXBP
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
0010 90FFFE            MOV     DPTR,#0FFFEH
0013 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 432
0016 850083      E     MOV     DPH,?C_XBP
0019 850082      E     MOV     DPL,?C_XBP+01H
001C A3                INC     DPTR
001D 7401              MOV     A,#01H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
0020 850083      E     MOV     DPH,?C_XBP
0023 850082      E     MOV     DPL,?C_XBP+01H
0026 A3                INC     DPTR
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B C3                CLR     C
002C 9418              SUBB    A,#018H
002E 5061              JNC     ?C0024
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
0030 850083      E     MOV     DPH,?C_XBP
0033 850082      E     MOV     DPL,?C_XBP+01H
0036 A3                INC     DPTR
0037 A3                INC     DPTR
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 75F010            MOV     B,#010H
003D EF                MOV     A,R7
003E 907010            MOV     DPTR,#07010H
0041 120000      E     LCALL   ?C?OFFXADD
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 54F1              ANL     A,#0F1H
0049 FF                MOV     R7,A
004A 850083      E     MOV     DPH,?C_XBP
004D 850082      E     MOV     DPL,?C_XBP+01H
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
0052 900003            MOV     DPTR,#03H
0055 120000      E     LCALL   ?C?XBPOFF
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 30  

0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B 5407              ANL     A,#07H
005D FF                MOV     R7,A
005E 7E00              MOV     R6,#00H
0060 EF                MOV     A,R7
0061 25E0              ADD     A,ACC
0063 FF                MOV     R7,A
0064 EE                MOV     A,R6
0065 33                RLC     A
0066 FE                MOV     R6,A
0067 850083      E     MOV     DPH,?C_XBP
006A 850082      E     MOV     DPL,?C_XBP+01H
006D E0                MOVX    A,@DPTR
006E FE                MOV     R6,A
006F EF                MOV     A,R7
0070 4E                ORL     A,R6
0071 FF                MOV     R7,A
0072 850083      E     MOV     DPH,?C_XBP
0075 850082      E     MOV     DPL,?C_XBP+01H
0078 A3                INC     DPTR
0079 A3                INC     DPTR
007A E0                MOVX    A,@DPTR
007B FE                MOV     R6,A
007C 75F010            MOV     B,#010H
007F EE                MOV     A,R6
0080 907010            MOV     DPTR,#07010H
0083 120000      E     LCALL   ?C?OFFXADD
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
0088 850083      E     MOV     DPH,?C_XBP
008B 850082      E     MOV     DPL,?C_XBP+01H
008E A3                INC     DPTR
008F E4                CLR     A
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
0091         ?C0024:
                                           ; SOURCE LINE # 443
0091 850083      E     MOV     DPH,?C_XBP
0094 850082      E     MOV     DPL,?C_XBP+01H
0097 A3                INC     DPTR
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
                                           ; SOURCE LINE # 444
009A         ?C0025:
009A 900004            MOV     DPTR,#04H
009D 120000      E     LCALL   ?C?ADDXBP
00A0 22                RET     
             ; FUNCTION _?CyDmaChPriority (END)

             ; FUNCTION _?CyDmaChSetExtendedAddress (BEGIN)
                                           ; SOURCE LINE # 470
0000 90FFFE            MOV     DPTR,#0FFFEH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B 90FFFE            MOV     DPTR,#0FFFEH
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 31  

000E 120000      E     LCALL   ?C?ADDXBP
0011 EC                MOV     A,R4
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 ED                MOV     A,R5
0015 F0                MOVX    @DPTR,A
0016 90FFFF            MOV     DPTR,#0FFFFH
0019 120000      E     LCALL   ?C?ADDXBP
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
001E 90FFFD            MOV     DPTR,#0FFFDH
0021 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 473
0024 850083      E     MOV     DPH,?C_XBP
0027 850082      E     MOV     DPL,?C_XBP+01H
002A 7401              MOV     A,#01H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
002D 900003            MOV     DPTR,#03H
0030 120000      E     LCALL   ?C?XBPOFF
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 C3                CLR     C
0037 9418              SUBB    A,#018H
0039 4003              JC      $ + 5H
003B 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 495
003E 900003            MOV     DPTR,#03H
0041 120000      E     LCALL   ?C?XBPOFF
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 7E08              MOV     R6,#08H
0048 EF                MOV     A,R7
0049 8EF0              MOV     B,R6
004B A4                MUL     AB
004C FF                MOV     R7,A
004D AEF0              MOV     R6,B
004F EF                MOV     A,R7
0050 2404              ADD     A,#04H
0052 FF                MOV     R7,A
0053 EE                MOV     A,R6
0054 3476              ADDC    A,#076H
0056 FE                MOV     R6,A
0057 850083      E     MOV     DPH,?C_XBP
005A 850082      E     MOV     DPL,?C_XBP+01H
005D A3                INC     DPTR
005E EE                MOV     A,R6
005F F0                MOVX    @DPTR,A
0060 A3                INC     DPTR
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
0063 850083      E     MOV     DPH,?C_XBP
0066 850082      E     MOV     DPL,?C_XBP+01H
0069 A3                INC     DPTR
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 32  

006F AA06              MOV     R2,AR6
0071 A907              MOV     R1,AR7
0073 7B01              MOV     R3,#01H
0075 900004            MOV     DPTR,#04H
0078 120000      E     LCALL   ?C?XBPOFF
007B E0                MOVX    A,@DPTR
007C FC                MOV     R4,A
007D A3                INC     DPTR
007E E0                MOVX    A,@DPTR
007F FD                MOV     R5,A
0080 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 499
0083 900003            MOV     DPTR,#03H
0086 120000      E     LCALL   ?C?XBPOFF
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B 7E08              MOV     R6,#08H
008D EF                MOV     A,R7
008E 8EF0              MOV     B,R6
0090 A4                MUL     AB
0091 FF                MOV     R7,A
0092 AEF0              MOV     R6,B
0094 EF                MOV     A,R7
0095 2406              ADD     A,#06H
0097 FF                MOV     R7,A
0098 EE                MOV     A,R6
0099 3476              ADDC    A,#076H
009B FE                MOV     R6,A
009C 850083      E     MOV     DPH,?C_XBP
009F 850082      E     MOV     DPL,?C_XBP+01H
00A2 A3                INC     DPTR
00A3 EE                MOV     A,R6
00A4 F0                MOVX    @DPTR,A
00A5 A3                INC     DPTR
00A6 EF                MOV     A,R7
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
00A8 850083      E     MOV     DPH,?C_XBP
00AB 850082      E     MOV     DPL,?C_XBP+01H
00AE A3                INC     DPTR
00AF E0                MOVX    A,@DPTR
00B0 FE                MOV     R6,A
00B1 A3                INC     DPTR
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 AA06              MOV     R2,AR6
00B6 A907              MOV     R1,AR7
00B8 7B01              MOV     R3,#01H
00BA 900006            MOV     DPTR,#06H
00BD 120000      E     LCALL   ?C?XBPOFF
00C0 E0                MOVX    A,@DPTR
00C1 FC                MOV     R4,A
00C2 A3                INC     DPTR
00C3 E0                MOVX    A,@DPTR
00C4 FD                MOV     R5,A
00C5 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 501
00C8 850083      E     MOV     DPH,?C_XBP
00CB 850082      E     MOV     DPL,?C_XBP+01H
00CE E4                CLR     A
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 502
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 33  

00D0         ?C0026:
                                           ; SOURCE LINE # 504
00D0 850083      E     MOV     DPH,?C_XBP
00D3 850082      E     MOV     DPL,?C_XBP+01H
00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
                                           ; SOURCE LINE # 505
00D8         ?C0027:
00D8 900008            MOV     DPTR,#08H
00DB 120000      E     LCALL   ?C?ADDXBP
00DE 22                RET     
             ; FUNCTION _?CyDmaChSetExtendedAddress (END)

             ; FUNCTION _?CyDmaChSetInitialTd (BEGIN)
                                           ; SOURCE LINE # 529
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 90FFFF            MOV     DPTR,#0FFFFH
000B 120000      E     LCALL   ?C?ADDXBP
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
0010 90FFFF            MOV     DPTR,#0FFFFH
0013 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 531
0016 850083      E     MOV     DPH,?C_XBP
0019 850082      E     MOV     DPL,?C_XBP+01H
001C 7401              MOV     A,#01H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
001F 850083      E     MOV     DPH,?C_XBP
0022 850082      E     MOV     DPL,?C_XBP+01H
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 C3                CLR     C
002A 9418              SUBB    A,#018H
002C 5027              JNC     ?C0028
                                           ; SOURCE LINE # 534
                                           ; SOURCE LINE # 535
002E 850083      E     MOV     DPH,?C_XBP
0031 850082      E     MOV     DPL,?C_XBP+01H
0034 A3                INC     DPTR
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 850083      E     MOV     DPH,?C_XBP
003B 850082      E     MOV     DPL,?C_XBP+01H
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FE                MOV     R6,A
0041 75F010            MOV     B,#010H
0044 EE                MOV     A,R6
0045 907019            MOV     DPTR,#07019H
0048 120000      E     LCALL   ?C?OFFXADD
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
004D 850083      E     MOV     DPH,?C_XBP
0050 850082      E     MOV     DPL,?C_XBP+01H
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 34  

0053 E4                CLR     A
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
0055         ?C0028:
                                           ; SOURCE LINE # 539
0055 850083      E     MOV     DPH,?C_XBP
0058 850082      E     MOV     DPL,?C_XBP+01H
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
                                           ; SOURCE LINE # 540
005D         ?C0029:
005D 900003            MOV     DPTR,#03H
0060 120000      E     LCALL   ?C?ADDXBP
0063 22                RET     
             ; FUNCTION _?CyDmaChSetInitialTd (END)

             ; FUNCTION _CyDmaChSetRequest (BEGIN)
                                           ; SOURCE LINE # 567
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#request
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
000A 900000      R     MOV     DPTR,#status
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 571
0010 900000      R     MOV     DPTR,#chHandle
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 C3                CLR     C
0017 9418              SUBB    A,#018H
0019 502C              JNC     ?C0030
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
001B 900000      R     MOV     DPTR,#chHandle
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 75F010            MOV     B,#010H
0023 EF                MOV     A,R7
0024 907014            MOV     DPTR,#07014H
0027 120000      E     LCALL   ?C?OFFXADD
002A C083              PUSH    DPH
002C C082              PUSH    DPL
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#request
0033 E0                MOVX    A,@DPTR
0034 FE                MOV     R6,A
0035 EE                MOV     A,R6
0036 5407              ANL     A,#07H
0038 FE                MOV     R6,A
0039 EF                MOV     A,R7
003A 4E                ORL     A,R6
003B FF                MOV     R7,A
003C D082              POP     DPL
003E D083              POP     DPH
0040 EF                MOV     A,R7
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 35  

0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
0042 900000      R     MOV     DPTR,#status
0045 E4                CLR     A
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 575
0047         ?C0030:
                                           ; SOURCE LINE # 577
0047 900000      R     MOV     DPTR,#status
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
                                           ; SOURCE LINE # 578
004C         ?C0031:
004C 22                RET     
             ; FUNCTION _CyDmaChSetRequest (END)

             ; FUNCTION _CyDmaChGetRequest (BEGIN)
                                           ; SOURCE LINE # 600
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 602
0005 900000      R     MOV     DPTR,#status
0008 74FF              MOV     A,#0FFH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
000B 900000      R     MOV     DPTR,#chHandle
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 C3                CLR     C
0012 9418              SUBB    A,#018H
0014 502A              JNC     ?C0032
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 607
0016 900000      R     MOV     DPTR,#chHandle
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 75F010            MOV     B,#010H
001E EF                MOV     A,R7
001F 907014            MOV     DPTR,#07014H
0022 120000      E     LCALL   ?C?OFFXADD
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 E4                CLR     A
0028 FC                MOV     R4,A
0029 FD                MOV     R5,A
002A FE                MOV     R6,A
002B EF                MOV     A,R7
002C 5407              ANL     A,#07H
002E FF                MOV     R7,A
002F EE                MOV     A,R6
0030 5400              ANL     A,#00H
0032 FE                MOV     R6,A
0033 ED                MOV     A,R5
0034 5400              ANL     A,#00H
0036 FD                MOV     R5,A
0037 EC                MOV     A,R4
0038 5400              ANL     A,#00H
003A FC                MOV     R4,A
003B 900000      R     MOV     DPTR,#status
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 36  

003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 608
0040         ?C0032:
                                           ; SOURCE LINE # 610
0040 900000      R     MOV     DPTR,#status
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
                                           ; SOURCE LINE # 611
0045         ?C0033:
0045 22                RET     
             ; FUNCTION _CyDmaChGetRequest (END)

             ; FUNCTION _CyDmaChStatus (BEGIN)
                                           ; SOURCE LINE # 650
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#currentTd
0008 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 652
000B 900000      R     MOV     DPTR,#status
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
0011 900000      R     MOV     DPTR,#chHandle
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 C3                CLR     C
0018 9418              SUBB    A,#018H
001A 4003              JC      $ + 5H
001C 020000      R     LJMP    ?C0034
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
001F 7B00              MOV     R3,#00H
0021 7A00              MOV     R2,#00H
0023 7900              MOV     R1,#00H
0025 C003              PUSH    AR3
0027 C002              PUSH    AR2
0029 C001              PUSH    AR1
002B 900000      R     MOV     DPTR,#currentTd
002E 120000      E     LCALL   ?C?PLDXDATA
0031 D082              POP     DPL
0033 D083              POP     DPH
0035 D0E0              POP     ACC
0037 6B                XRL     A,R3
0038 7008              JNZ     ?C0062
003A E9                MOV     A,R1
003B 6582              XRL     A,DPL
003D 7003              JNZ     ?C0062
003F EA                MOV     A,R2
0040 6583              XRL     A,DPH
0042         ?C0062:
0042 601F              JZ      ?C0035
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 658
0044 900000      R     MOV     DPTR,#chHandle
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 75F010            MOV     B,#010H
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 37  

004C EF                MOV     A,R7
004D 907019            MOV     DPTR,#07019H
0050 120000      E     LCALL   ?C?OFFXADD
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 547F              ANL     A,#07FH
0058 FF                MOV     R7,A
0059 900000      R     MOV     DPTR,#currentTd
005C 120000      E     LCALL   ?C?PLDXDATA
005F EF                MOV     A,R7
0060 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 659
0063         ?C0035:
                                           ; SOURCE LINE # 661
0063 7B00              MOV     R3,#00H
0065 7A00              MOV     R2,#00H
0067 7900              MOV     R1,#00H
0069 C003              PUSH    AR3
006B C002              PUSH    AR2
006D C001              PUSH    AR1
006F 900000      R     MOV     DPTR,#state
0072 120000      E     LCALL   ?C?PLDXDATA
0075 D082              POP     DPL
0077 D083              POP     DPH
0079 D0E0              POP     ACC
007B 6B                XRL     A,R3
007C 7008              JNZ     ?C0063
007E E9                MOV     A,R1
007F 6582              XRL     A,DPL
0081 7003              JNZ     ?C0063
0083 EA                MOV     A,R2
0084 6583              XRL     A,DPH
0086         ?C0063:
0086 601B              JZ      ?C0036
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 663
0088 900000      R     MOV     DPTR,#chHandle
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D 75F010            MOV     B,#010H
0090 EF                MOV     A,R7
0091 907018            MOV     DPTR,#07018H
0094 120000      E     LCALL   ?C?OFFXADD
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 900000      R     MOV     DPTR,#state
009C 120000      E     LCALL   ?C?PLDXDATA
009F EF                MOV     A,R7
00A0 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 664
00A3         ?C0036:
                                           ; SOURCE LINE # 666
00A3 900000      R     MOV     DPTR,#status
00A6 E4                CLR     A
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 667
00A8         ?C0034:
                                           ; SOURCE LINE # 669
00A8 900000      R     MOV     DPTR,#status
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 38  

                                           ; SOURCE LINE # 670
00AD         ?C0037:
00AD 22                RET     
             ; FUNCTION _CyDmaChStatus (END)

             ; FUNCTION _?CyDmaChSetConfiguration (BEGIN)
                                           ; SOURCE LINE # 716
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 90FFFF            MOV     DPTR,#0FFFFH
000B 120000      E     LCALL   ?C?ADDXBP
000E ED                MOV     A,R5
000F F0                MOVX    @DPTR,A
0010 90FFFF            MOV     DPTR,#0FFFFH
0013 120000      E     LCALL   ?C?ADDXBP
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
0018 90FFFF            MOV     DPTR,#0FFFFH
001B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 717
                                           ; SOURCE LINE # 719
001E 850083      E     MOV     DPH,?C_XBP
0021 850082      E     MOV     DPL,?C_XBP+01H
0024 7401              MOV     A,#01H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 721
0027 850083      E     MOV     DPH,?C_XBP
002A 850082      E     MOV     DPL,?C_XBP+01H
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 C3                CLR     C
0032 9418              SUBB    A,#018H
0034 4003              JC      $ + 5H
0036 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 723
0039 900003            MOV     DPTR,#03H
003C 120000      E     LCALL   ?C?XBPOFF
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 EF                MOV     A,R7
0042 5401              ANL     A,#01H
0044 FF                MOV     R7,A
0045 7E00              MOV     R6,#00H
0047 EF                MOV     A,R7
0048 75F080            MOV     B,#080H
004B A4                MUL     AB
004C FF                MOV     R7,A
004D AEF0              MOV     R6,B
004F 850083      E     MOV     DPH,?C_XBP
0052 850082      E     MOV     DPL,?C_XBP+01H
0055 A3                INC     DPTR
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FE                MOV     R6,A
0059 EE                MOV     A,R6
005A 547F              ANL     A,#07FH
005C FE                MOV     R6,A
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 39  

005D EE                MOV     A,R6
005E 4F                ORL     A,R7
005F FF                MOV     R7,A
0060 850083      E     MOV     DPH,?C_XBP
0063 850082      E     MOV     DPL,?C_XBP+01H
0066 A3                INC     DPTR
0067 E0                MOVX    A,@DPTR
0068 FE                MOV     R6,A
0069 75F008            MOV     B,#08H
006C EE                MOV     A,R6
006D 907600            MOV     DPTR,#07600H
0070 120000      E     LCALL   ?C?OFFXADD
0073 EF                MOV     A,R7
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
0075 900005            MOV     DPTR,#05H
0078 120000      E     LCALL   ?C?XBPOFF
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 540F              ANL     A,#0FH
0080 FF                MOV     R7,A
0081 7E00              MOV     R6,#00H
0083 EF                MOV     A,R7
0084 75F010            MOV     B,#010H
0087 A4                MUL     AB
0088 FF                MOV     R7,A
0089 AEF0              MOV     R6,B
008B 900004            MOV     DPTR,#04H
008E 120000      E     LCALL   ?C?XBPOFF
0091 E0                MOVX    A,@DPTR
0092 FE                MOV     R6,A
0093 EE                MOV     A,R6
0094 540F              ANL     A,#0FH
0096 FE                MOV     R6,A
0097 EE                MOV     A,R6
0098 4F                ORL     A,R7
0099 FF                MOV     R7,A
009A 850083      E     MOV     DPH,?C_XBP
009D 850082      E     MOV     DPL,?C_XBP+01H
00A0 A3                INC     DPTR
00A1 E0                MOVX    A,@DPTR
00A2 FE                MOV     R6,A
00A3 75F008            MOV     B,#08H
00A6 EE                MOV     A,R6
00A7 907601            MOV     DPTR,#07601H
00AA 120000      E     LCALL   ?C?OFFXADD
00AD EF                MOV     A,R7
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 725
00AF 900006            MOV     DPTR,#06H
00B2 120000      E     LCALL   ?C?XBPOFF
00B5 E0                MOVX    A,@DPTR
00B6 FF                MOV     R7,A
00B7 EF                MOV     A,R7
00B8 540F              ANL     A,#0FH
00BA FF                MOV     R7,A
00BB 850083      E     MOV     DPH,?C_XBP
00BE 850082      E     MOV     DPL,?C_XBP+01H
00C1 A3                INC     DPTR
00C2 E0                MOVX    A,@DPTR
00C3 FE                MOV     R6,A
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 40  

00C4 75F008            MOV     B,#08H
00C7 EE                MOV     A,R6
00C8 907602            MOV     DPTR,#07602H
00CB 120000      E     LCALL   ?C?OFFXADD
00CE EF                MOV     A,R7
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 726
00D0 850083      E     MOV     DPH,?C_XBP
00D3 850082      E     MOV     DPL,?C_XBP+01H
00D6 A3                INC     DPTR
00D7 E0                MOVX    A,@DPTR
00D8 FF                MOV     R7,A
00D9 75F008            MOV     B,#08H
00DC EF                MOV     A,R7
00DD 907603            MOV     DPTR,#07603H
00E0 120000      E     LCALL   ?C?OFFXADD
00E3 E4                CLR     A
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 728
00E5 850083      E     MOV     DPH,?C_XBP
00E8 850082      E     MOV     DPL,?C_XBP+01H
00EB E4                CLR     A
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 729
00ED         ?C0038:
                                           ; SOURCE LINE # 731
00ED 850083      E     MOV     DPH,?C_XBP
00F0 850082      E     MOV     DPL,?C_XBP+01H
00F3 E0                MOVX    A,@DPTR
00F4 FF                MOV     R7,A
                                           ; SOURCE LINE # 732
00F5         ?C0039:
00F5 900007            MOV     DPTR,#07H
00F8 120000      E     LCALL   ?C?ADDXBP
00FB 22                RET     
             ; FUNCTION _?CyDmaChSetConfiguration (END)

             ; FUNCTION _?CyDmaTdAllocate (BEGIN)
                                           ; SOURCE LINE # 752
0000 90FFFE            MOV     DPTR,#0FFFEH
0003 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 755
0006 850083      E     MOV     DPH,?C_XBP
0009 850082      E     MOV     DPL,?C_XBP+01H
000C A3                INC     DPTR
000D 74FF              MOV     A,#0FFH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 758
0010 120000      E     LCALL   CyEnterCriticalSection
0013 850083      E     MOV     DPH,?C_XBP
0016 850082      E     MOV     DPL,?C_XBP+01H
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 760
001B 900000      R     MOV     DPTR,#CyDmaTdCurrentNumber
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 D3                SETB    C
0022 9418              SUBB    A,#018H
0024 402E              JC      ?C0040
                                           ; SOURCE LINE # 761
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 41  

                                           ; SOURCE LINE # 763
0026 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 850083      E     MOV     DPH,?C_XBP
002E 850082      E     MOV     DPL,?C_XBP+01H
0031 A3                INC     DPTR
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 766
0034 900000      R     MOV     DPTR,#CyDmaTdCurrentNumber
0037 E0                MOVX    A,@DPTR
0038 14                DEC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 769
003A 850083      E     MOV     DPH,?C_XBP
003D 850082      E     MOV     DPL,?C_XBP+01H
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 75F008            MOV     B,#08H
0046 EF                MOV     A,R7
0047 907800            MOV     DPTR,#07800H
004A 120000      E     LCALL   ?C?OFFXADD
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 770
0054         ?C0040:
                                           ; SOURCE LINE # 773
0054 850083      E     MOV     DPH,?C_XBP
0057 850082      E     MOV     DPL,?C_XBP+01H
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 775
005F 850083      E     MOV     DPH,?C_XBP
0062 850082      E     MOV     DPL,?C_XBP+01H
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
                                           ; SOURCE LINE # 776
0068         ?C0041:
0068 900002            MOV     DPTR,#02H
006B 120000      E     LCALL   ?C?ADDXBP
006E 22                RET     
             ; FUNCTION _?CyDmaTdAllocate (END)

             ; FUNCTION _CyDmaTdFree (BEGIN)
                                           ; SOURCE LINE # 794
0000 900000      R     MOV     DPTR,#tdHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 796
0005 900000      R     MOV     DPTR,#tdHandle
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 42  

000C 9480              SUBB    A,#080H
000E 5036              JNC     ?C0043
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 799
0010 120000      E     LCALL   CyEnterCriticalSection
0013 900000      R     MOV     DPTR,#interruptState
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 802
0018 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#tdHandle
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 75F008            MOV     B,#08H
0025 EE                MOV     A,R6
0026 907800            MOV     DPTR,#07800H
0029 120000      E     LCALL   ?C?OFFXADD
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
002E 900000      R     MOV     DPTR,#tdHandle
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 808
0038 900000      R     MOV     DPTR,#CyDmaTdCurrentNumber
003B E0                MOVX    A,@DPTR
003C 04                INC     A
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 811
003E 900000      R     MOV     DPTR,#interruptState
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 813
0046         ?C0043:
0046 22                RET     
             ; FUNCTION _CyDmaTdFree (END)

             ; FUNCTION CyDmaTdFreeCount (BEGIN)
                                           ; SOURCE LINE # 830
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
0000 900000      R     MOV     DPTR,#CyDmaTdCurrentNumber
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 C3                CLR     C
0006 EF                MOV     A,R7
0007 9418              SUBB    A,#018H
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 833
000A         ?C0044:
000A 22                RET     
             ; FUNCTION CyDmaTdFreeCount (END)

             ; FUNCTION _?CyDmaTdSetConfiguration (BEGIN)
                                           ; SOURCE LINE # 891
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 43  

0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 90FFFE            MOV     DPTR,#0FFFEH
000B 120000      E     LCALL   ?C?ADDXBP
000E EC                MOV     A,R4
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 ED                MOV     A,R5
0012 F0                MOVX    @DPTR,A
0013 90FFFF            MOV     DPTR,#0FFFFH
0016 120000      E     LCALL   ?C?ADDXBP
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
001B 90FFFD            MOV     DPTR,#0FFFDH
001E 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 894
0021 850083      E     MOV     DPH,?C_XBP
0024 850082      E     MOV     DPL,?C_XBP+01H
0027 7401              MOV     A,#01H
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 896
002A 900003            MOV     DPTR,#03H
002D 120000      E     LCALL   ?C?XBPOFF
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 C3                CLR     C
0034 9480              SUBB    A,#080H
0036 4003              JC      $ + 5H
0038 020000      R     LJMP    ?C0045
003B 900004            MOV     DPTR,#04H
003E 120000      E     LCALL   ?C?XBPOFF
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EE                MOV     A,R6
0047 54F0              ANL     A,#0F0H
0049 FE                MOV     R6,A
004A 7F00              MOV     R7,#00H
004C EF                MOV     A,R7
004D 4E                ORL     A,R6
004E 6003              JZ      $ + 5H
0050 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 897
                                           ; SOURCE LINE # 899
0053 900003            MOV     DPTR,#03H
0056 120000      E     LCALL   ?C?XBPOFF
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B 7E08              MOV     R6,#08H
005D EF                MOV     A,R7
005E 8EF0              MOV     B,R6
0060 A4                MUL     AB
0061 FF                MOV     R7,A
0062 AEF0              MOV     R6,B
0064 EF                MOV     A,R7
0065 2400              ADD     A,#00H
0067 FF                MOV     R7,A
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 44  

0068 EE                MOV     A,R6
0069 3478              ADDC    A,#078H
006B FE                MOV     R6,A
006C 850083      E     MOV     DPH,?C_XBP
006F 850082      E     MOV     DPL,?C_XBP+01H
0072 A3                INC     DPTR
0073 EE                MOV     A,R6
0074 F0                MOVX    @DPTR,A
0075 A3                INC     DPTR
0076 EF                MOV     A,R7
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 900
0078 850083      E     MOV     DPH,?C_XBP
007B 850082      E     MOV     DPL,?C_XBP+01H
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FE                MOV     R6,A
0081 A3                INC     DPTR
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 AA06              MOV     R2,AR6
0086 A907              MOV     R1,AR7
0088 7B01              MOV     R3,#01H
008A 900004            MOV     DPTR,#04H
008D 120000      E     LCALL   ?C?XBPOFF
0090 E0                MOVX    A,@DPTR
0091 FC                MOV     R4,A
0092 A3                INC     DPTR
0093 E0                MOVX    A,@DPTR
0094 FD                MOV     R5,A
0095 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 903
0098 900006            MOV     DPTR,#06H
009B 120000      E     LCALL   ?C?XBPOFF
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
00A0 900003            MOV     DPTR,#03H
00A3 120000      E     LCALL   ?C?XBPOFF
00A6 E0                MOVX    A,@DPTR
00A7 FE                MOV     R6,A
00A8 75F008            MOV     B,#08H
00AB EE                MOV     A,R6
00AC 907802            MOV     DPTR,#07802H
00AF 120000      E     LCALL   ?C?OFFXADD
00B2 EF                MOV     A,R7
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 906
00B4 900007            MOV     DPTR,#07H
00B7 120000      E     LCALL   ?C?XBPOFF
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC 900003            MOV     DPTR,#03H
00BF 120000      E     LCALL   ?C?XBPOFF
00C2 E0                MOVX    A,@DPTR
00C3 FE                MOV     R6,A
00C4 75F008            MOV     B,#08H
00C7 EE                MOV     A,R6
00C8 907803            MOV     DPTR,#07803H
00CB 120000      E     LCALL   ?C?OFFXADD
00CE EF                MOV     A,R7
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 908
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 45  

00D0 850083      E     MOV     DPH,?C_XBP
00D3 850082      E     MOV     DPL,?C_XBP+01H
00D6 E4                CLR     A
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 909
00D8         ?C0045:
                                           ; SOURCE LINE # 911
00D8 850083      E     MOV     DPH,?C_XBP
00DB 850082      E     MOV     DPL,?C_XBP+01H
00DE E0                MOVX    A,@DPTR
00DF FF                MOV     R7,A
                                           ; SOURCE LINE # 912
00E0         ?C0046:
00E0 900008            MOV     DPTR,#08H
00E3 120000      E     LCALL   ?C?ADDXBP
00E6 22                RET     
             ; FUNCTION _?CyDmaTdSetConfiguration (END)

             ; FUNCTION _CyDmaTdGetConfiguration (BEGIN)
                                           ; SOURCE LINE # 951
0000 900000      R     MOV     DPTR,#tdHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#transferCount
0008 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 953
                                           ; SOURCE LINE # 954
000B 900000      R     MOV     DPTR,#status
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 956
0011 900000      R     MOV     DPTR,#tdHandle
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 C3                CLR     C
0018 9480              SUBB    A,#080H
001A 4003              JC      $ + 5H
001C 020000      R     LJMP    ?C0047
                                           ; SOURCE LINE # 957
                                           ; SOURCE LINE # 959
001F 7B00              MOV     R3,#00H
0021 7A00              MOV     R2,#00H
0023 7900              MOV     R1,#00H
0025 C003              PUSH    AR3
0027 C002              PUSH    AR2
0029 C001              PUSH    AR1
002B 900000      R     MOV     DPTR,#transferCount
002E 120000      E     LCALL   ?C?PLDXDATA
0031 D082              POP     DPL
0033 D083              POP     DPH
0035 D0E0              POP     ACC
0037 6B                XRL     A,R3
0038 7008              JNZ     ?C0064
003A E9                MOV     A,R1
003B 6582              XRL     A,DPL
003D 7003              JNZ     ?C0064
003F EA                MOV     A,R2
0040 6583              XRL     A,DPH
0042         ?C0064:
0042 603F              JZ      ?C0048
                                           ; SOURCE LINE # 960
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 46  

                                           ; SOURCE LINE # 962
0044 900000      R     MOV     DPTR,#tdHandle
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 7E08              MOV     R6,#08H
004B EF                MOV     A,R7
004C 8EF0              MOV     B,R6
004E A4                MUL     AB
004F FF                MOV     R7,A
0050 AEF0              MOV     R6,B
0052 EF                MOV     A,R7
0053 2400              ADD     A,#00H
0055 FF                MOV     R7,A
0056 EE                MOV     A,R6
0057 3478              ADDC    A,#078H
0059 FE                MOV     R6,A
005A 900000      R     MOV     DPTR,#convert
005D EE                MOV     A,R6
005E F0                MOVX    @DPTR,A
005F A3                INC     DPTR
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 963
0062 900000      R     MOV     DPTR,#convert
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A AA06              MOV     R2,AR6
006C A907              MOV     R1,AR7
006E 7B01              MOV     R3,#01H
0070 120000      E     LCALL   _cyread16_nodpx
0073 EE                MOV     A,R6
0074 540F              ANL     A,#0FH
0076 FE                MOV     R6,A
0077 900000      R     MOV     DPTR,#transferCount
007A 120000      E     LCALL   ?C?PLDXDATA
007D EE                MOV     A,R6
007E 8FF0              MOV     B,R7
0080 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 964
0083         ?C0048:
                                           ; SOURCE LINE # 967
0083 7B00              MOV     R3,#00H
0085 7A00              MOV     R2,#00H
0087 7900              MOV     R1,#00H
0089 C003              PUSH    AR3
008B C002              PUSH    AR2
008D C001              PUSH    AR1
008F 900000      R     MOV     DPTR,#nextTd
0092 120000      E     LCALL   ?C?PLDXDATA
0095 D082              POP     DPL
0097 D083              POP     DPH
0099 D0E0              POP     ACC
009B 6B                XRL     A,R3
009C 7008              JNZ     ?C0065
009E E9                MOV     A,R1
009F 6582              XRL     A,DPL
00A1 7003              JNZ     ?C0065
00A3 EA                MOV     A,R2
00A4 6583              XRL     A,DPH
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 47  

00A6         ?C0065:
00A6 601B              JZ      ?C0049
                                           ; SOURCE LINE # 968
                                           ; SOURCE LINE # 970
00A8 900000      R     MOV     DPTR,#tdHandle
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD 75F008            MOV     B,#08H
00B0 EF                MOV     A,R7
00B1 907802            MOV     DPTR,#07802H
00B4 120000      E     LCALL   ?C?OFFXADD
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 900000      R     MOV     DPTR,#nextTd
00BC 120000      E     LCALL   ?C?PLDXDATA
00BF EF                MOV     A,R7
00C0 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 971
00C3         ?C0049:
                                           ; SOURCE LINE # 974
00C3 7B00              MOV     R3,#00H
00C5 7A00              MOV     R2,#00H
00C7 7900              MOV     R1,#00H
00C9 C003              PUSH    AR3
00CB C002              PUSH    AR2
00CD C001              PUSH    AR1
00CF 900000      R     MOV     DPTR,#configuration
00D2 120000      E     LCALL   ?C?PLDXDATA
00D5 D082              POP     DPL
00D7 D083              POP     DPH
00D9 D0E0              POP     ACC
00DB 6B                XRL     A,R3
00DC 7008              JNZ     ?C0066
00DE E9                MOV     A,R1
00DF 6582              XRL     A,DPL
00E1 7003              JNZ     ?C0066
00E3 EA                MOV     A,R2
00E4 6583              XRL     A,DPH
00E6         ?C0066:
00E6 601B              JZ      ?C0050
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 977
00E8 900000      R     MOV     DPTR,#tdHandle
00EB E0                MOVX    A,@DPTR
00EC FF                MOV     R7,A
00ED 75F008            MOV     B,#08H
00F0 EF                MOV     A,R7
00F1 907803            MOV     DPTR,#07803H
00F4 120000      E     LCALL   ?C?OFFXADD
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9 900000      R     MOV     DPTR,#configuration
00FC 120000      E     LCALL   ?C?PLDXDATA
00FF EF                MOV     A,R7
0100 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 978
0103         ?C0050:
                                           ; SOURCE LINE # 980
0103 900000      R     MOV     DPTR,#status
0106 E4                CLR     A
0107 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 981
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 48  

0108         ?C0047:
                                           ; SOURCE LINE # 983
0108 900000      R     MOV     DPTR,#status
010B E0                MOVX    A,@DPTR
010C FF                MOV     R7,A
                                           ; SOURCE LINE # 984
010D         ?C0051:
010D 22                RET     
             ; FUNCTION _CyDmaTdGetConfiguration (END)

             ; FUNCTION _?CyDmaTdSetAddress (BEGIN)
                                           ; SOURCE LINE # 1010
0000 90FFFE            MOV     DPTR,#0FFFEH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B 90FFFE            MOV     DPTR,#0FFFEH
000E 120000      E     LCALL   ?C?ADDXBP
0011 EC                MOV     A,R4
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 ED                MOV     A,R5
0015 F0                MOVX    @DPTR,A
0016 90FFFF            MOV     DPTR,#0FFFFH
0019 120000      E     LCALL   ?C?ADDXBP
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
001E 90FFFD            MOV     DPTR,#0FFFDH
0021 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 1012
0024 850083      E     MOV     DPH,?C_XBP
0027 850082      E     MOV     DPL,?C_XBP+01H
002A 7401              MOV     A,#01H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1015
002D 900003            MOV     DPTR,#03H
0030 120000      E     LCALL   ?C?XBPOFF
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 C3                CLR     C
0037 9480              SUBB    A,#080H
0039 4003              JC      $ + 5H
003B 020000      R     LJMP    ?C0052
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1018
003E 900003            MOV     DPTR,#03H
0041 120000      E     LCALL   ?C?XBPOFF
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 7E08              MOV     R6,#08H
0048 EF                MOV     A,R7
0049 8EF0              MOV     B,R6
004B A4                MUL     AB
004C FF                MOV     R7,A
004D AEF0              MOV     R6,B
004F EF                MOV     A,R7
0050 2404              ADD     A,#04H
0052 FF                MOV     R7,A
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 49  

0053 EE                MOV     A,R6
0054 3478              ADDC    A,#078H
0056 FE                MOV     R6,A
0057 850083      E     MOV     DPH,?C_XBP
005A 850082      E     MOV     DPL,?C_XBP+01H
005D A3                INC     DPTR
005E EE                MOV     A,R6
005F F0                MOVX    @DPTR,A
0060 A3                INC     DPTR
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1019
0063 850083      E     MOV     DPH,?C_XBP
0066 850082      E     MOV     DPL,?C_XBP+01H
0069 A3                INC     DPTR
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F AA06              MOV     R2,AR6
0071 A907              MOV     R1,AR7
0073 7B01              MOV     R3,#01H
0075 900004            MOV     DPTR,#04H
0078 120000      E     LCALL   ?C?XBPOFF
007B E0                MOVX    A,@DPTR
007C FC                MOV     R4,A
007D A3                INC     DPTR
007E E0                MOVX    A,@DPTR
007F FD                MOV     R5,A
0080 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 1022
0083 900003            MOV     DPTR,#03H
0086 120000      E     LCALL   ?C?XBPOFF
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B 7E08              MOV     R6,#08H
008D EF                MOV     A,R7
008E 8EF0              MOV     B,R6
0090 A4                MUL     AB
0091 FF                MOV     R7,A
0092 AEF0              MOV     R6,B
0094 EF                MOV     A,R7
0095 2406              ADD     A,#06H
0097 FF                MOV     R7,A
0098 EE                MOV     A,R6
0099 3478              ADDC    A,#078H
009B FE                MOV     R6,A
009C 850083      E     MOV     DPH,?C_XBP
009F 850082      E     MOV     DPL,?C_XBP+01H
00A2 A3                INC     DPTR
00A3 EE                MOV     A,R6
00A4 F0                MOVX    @DPTR,A
00A5 A3                INC     DPTR
00A6 EF                MOV     A,R7
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1023
00A8 850083      E     MOV     DPH,?C_XBP
00AB 850082      E     MOV     DPL,?C_XBP+01H
00AE A3                INC     DPTR
00AF E0                MOVX    A,@DPTR
00B0 FE                MOV     R6,A
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 50  

00B1 A3                INC     DPTR
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 AA06              MOV     R2,AR6
00B6 A907              MOV     R1,AR7
00B8 7B01              MOV     R3,#01H
00BA 900006            MOV     DPTR,#06H
00BD 120000      E     LCALL   ?C?XBPOFF
00C0 E0                MOVX    A,@DPTR
00C1 FC                MOV     R4,A
00C2 A3                INC     DPTR
00C3 E0                MOVX    A,@DPTR
00C4 FD                MOV     R5,A
00C5 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 1025
00C8 850083      E     MOV     DPH,?C_XBP
00CB 850082      E     MOV     DPL,?C_XBP+01H
00CE E4                CLR     A
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1026
00D0         ?C0052:
                                           ; SOURCE LINE # 1028
00D0 850083      E     MOV     DPH,?C_XBP
00D3 850082      E     MOV     DPL,?C_XBP+01H
00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
                                           ; SOURCE LINE # 1029
00D8         ?C0053:
00D8 900008            MOV     DPTR,#08H
00DB 120000      E     LCALL   ?C?ADDXBP
00DE 22                RET     
             ; FUNCTION _?CyDmaTdSetAddress (END)

             ; FUNCTION _CyDmaTdGetAddress (BEGIN)
                                           ; SOURCE LINE # 1058
0000 900000      R     MOV     DPTR,#tdHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#source
0008 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
000B 900000      R     MOV     DPTR,#status
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1063
0011 900000      R     MOV     DPTR,#tdHandle
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 C3                CLR     C
0018 9480              SUBB    A,#080H
001A 4003              JC      $ + 5H
001C 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1066
001F 7B00              MOV     R3,#00H
0021 7A00              MOV     R2,#00H
0023 7900              MOV     R1,#00H
0025 C003              PUSH    AR3
0027 C002              PUSH    AR2
0029 C001              PUSH    AR1
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 51  

002B 900000      R     MOV     DPTR,#source
002E 120000      E     LCALL   ?C?PLDXDATA
0031 D082              POP     DPL
0033 D083              POP     DPH
0035 D0E0              POP     ACC
0037 6B                XRL     A,R3
0038 7008              JNZ     ?C0067
003A E9                MOV     A,R1
003B 6582              XRL     A,DPL
003D 7003              JNZ     ?C0067
003F EA                MOV     A,R2
0040 6583              XRL     A,DPH
0042         ?C0067:
0042 603B              JZ      ?C0055
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1069
0044 900000      R     MOV     DPTR,#tdHandle
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 7E08              MOV     R6,#08H
004B EF                MOV     A,R7
004C 8EF0              MOV     B,R6
004E A4                MUL     AB
004F FF                MOV     R7,A
0050 AEF0              MOV     R6,B
0052 EF                MOV     A,R7
0053 2404              ADD     A,#04H
0055 FF                MOV     R7,A
0056 EE                MOV     A,R6
0057 3478              ADDC    A,#078H
0059 FE                MOV     R6,A
005A 900000      R     MOV     DPTR,#convert
005D EE                MOV     A,R6
005E F0                MOVX    @DPTR,A
005F A3                INC     DPTR
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1070
0062 900000      R     MOV     DPTR,#convert
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A AA06              MOV     R2,AR6
006C A907              MOV     R1,AR7
006E 7B01              MOV     R3,#01H
0070 120000      E     LCALL   _cyread16_nodpx
0073 900000      R     MOV     DPTR,#source
0076 120000      E     LCALL   ?C?PLDXDATA
0079 EE                MOV     A,R6
007A 8FF0              MOV     B,R7
007C 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 1071
007F         ?C0055:
                                           ; SOURCE LINE # 1074
007F 7B00              MOV     R3,#00H
0081 7A00              MOV     R2,#00H
0083 7900              MOV     R1,#00H
0085 C003              PUSH    AR3
0087 C002              PUSH    AR2
0089 C001              PUSH    AR1
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 52  

008B 900000      R     MOV     DPTR,#destination
008E 120000      E     LCALL   ?C?PLDXDATA
0091 D082              POP     DPL
0093 D083              POP     DPH
0095 D0E0              POP     ACC
0097 6B                XRL     A,R3
0098 7008              JNZ     ?C0068
009A E9                MOV     A,R1
009B 6582              XRL     A,DPL
009D 7003              JNZ     ?C0068
009F EA                MOV     A,R2
00A0 6583              XRL     A,DPH
00A2         ?C0068:
00A2 603B              JZ      ?C0056
                                           ; SOURCE LINE # 1075
                                           ; SOURCE LINE # 1077
00A4 900000      R     MOV     DPTR,#tdHandle
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 7E08              MOV     R6,#08H
00AB EF                MOV     A,R7
00AC 8EF0              MOV     B,R6
00AE A4                MUL     AB
00AF FF                MOV     R7,A
00B0 AEF0              MOV     R6,B
00B2 EF                MOV     A,R7
00B3 2406              ADD     A,#06H
00B5 FF                MOV     R7,A
00B6 EE                MOV     A,R6
00B7 3478              ADDC    A,#078H
00B9 FE                MOV     R6,A
00BA 900000      R     MOV     DPTR,#convert
00BD EE                MOV     A,R6
00BE F0                MOVX    @DPTR,A
00BF A3                INC     DPTR
00C0 EF                MOV     A,R7
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1078
00C2 900000      R     MOV     DPTR,#convert
00C5 E0                MOVX    A,@DPTR
00C6 FE                MOV     R6,A
00C7 A3                INC     DPTR
00C8 E0                MOVX    A,@DPTR
00C9 FF                MOV     R7,A
00CA AA06              MOV     R2,AR6
00CC A907              MOV     R1,AR7
00CE 7B01              MOV     R3,#01H
00D0 120000      E     LCALL   _cyread16_nodpx
00D3 900000      R     MOV     DPTR,#destination
00D6 120000      E     LCALL   ?C?PLDXDATA
00D9 EE                MOV     A,R6
00DA 8FF0              MOV     B,R7
00DC 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 1079
00DF         ?C0056:
                                           ; SOURCE LINE # 1081
00DF 900000      R     MOV     DPTR,#status
00E2 E4                CLR     A
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1082
00E4         ?C0054:
                                           ; SOURCE LINE # 1084
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 53  

00E4 900000      R     MOV     DPTR,#status
00E7 E0                MOVX    A,@DPTR
00E8 FF                MOV     R7,A
                                           ; SOURCE LINE # 1085
00E9         ?C0057:
00E9 22                RET     
             ; FUNCTION _CyDmaTdGetAddress (END)

             ; FUNCTION _CyDmaChRoundRobin (BEGIN)
                                           ; SOURCE LINE # 1109
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#enableRR
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
000A 900000      R     MOV     DPTR,#status
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1113
0010 900000      R     MOV     DPTR,#chHandle
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 C3                CLR     C
0017 9418              SUBB    A,#018H
0019 503D              JNC     ?C0058
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1115
001B 900000      R     MOV     DPTR,#enableRR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 6019              JZ      ?C0059
                                           ; SOURCE LINE # 1116
                                           ; SOURCE LINE # 1117
0023 900000      R     MOV     DPTR,#chHandle
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 75F010            MOV     B,#010H
002B EF                MOV     A,R7
002C 907010            MOV     DPTR,#07010H
002F 120000      E     LCALL   ?C?OFFXADD
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 4410              ORL     A,#010H
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1118
003A 8017              SJMP    ?C0060
003C         ?C0059:
                                           ; SOURCE LINE # 1120
                                           ; SOURCE LINE # 1121
003C 900000      R     MOV     DPTR,#chHandle
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 75F010            MOV     B,#010H
0044 EF                MOV     A,R7
C51 COMPILER V9.51   CYDMAC                                                                02/21/2017 15:19:26 PAGE 54  

0045 907010            MOV     DPTR,#07010H
0048 120000      E     LCALL   ?C?OFFXADD
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EF                MOV     A,R7
004E 54EF              ANL     A,#0EFH
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
0053         ?C0060:
                                           ; SOURCE LINE # 1124
0053 900000      R     MOV     DPTR,#status
0056 E4                CLR     A
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1125
0058         ?C0058:
                                           ; SOURCE LINE # 1127
0058 900000      R     MOV     DPTR,#status
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
                                           ; SOURCE LINE # 1128
005D         ?C0061:
005D 22                RET     
             ; FUNCTION _CyDmaChRoundRobin (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3099    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6      52
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
