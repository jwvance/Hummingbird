C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USB_EPISR
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USB_episr.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\USB_episr.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(
                    -.\DP8051\DP8051_Keil_951\Debug/USB_episr.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USB_episr.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USB_episr.c
   3          * Version 2.70
   4          *
   5          * Description:
   6          *  Data endpoint Interrupt Service Routines
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "USB.h"
  18          #include "USB_pvt.h"
  19          #if (defined(USB_ENABLE_MIDI_STREAMING) && (USB_ENABLE_MIDI_API != 0u))
  20              #include "USB_midi.h"
  21          #endif /* (defined(USB_ENABLE_MIDI_STREAMING) && (USB_ENABLE_MIDI_API != 0u)) */
  22          #if ((USB_EP_MM == USB__EP_DMAAUTO) && (USB_EP_DMA_AUTO_OPT == 0u))
                  #include "USB_EP8_DMA_Done_SR.h"
                  #include "USB_EP17_DMA_Done_SR.h"
              #endif /* (USB_EP_MM == USB__EP_DMAAUTO) && (USB_EP_DMA_AUTO_OPT == 0u) */
  26          
  27          
  28          /***************************************
  29          * Custom Declarations
  30          ***************************************/
  31          /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  32          
  33          /* `#END` */
  34          
  35          
  36          #if(USB_EP1_ISR_REMOVE == 0u)
  37          
  38          
  39              /******************************************************************************
  40              * Function Name: USB_EP_1_ISR
  41              *******************************************************************************
  42              *
  43              * Summary:
  44              *  Endpoint 1 Interrupt Service Routine
  45              *
  46              * Parameters:
  47              *  None.
  48              *
  49              * Return:
  50              *  None.
  51              *
  52              ******************************************************************************/
  53              CY_ISR(USB_EP_1_ISR)
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 2   

  54              {
  55   1              #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT)  && \
  56   1                           USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
  59   1      
  60   1              /* `#START EP1_USER_CODE` Place your code here */
  61   1      
  62   1              /* `#END` */
  63   1      
  64   1              #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
  65   1                           USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
  69   1      
  70   1              CY_GET_REG8(USB_SIE_EP1_CR0_PTR); /* Must read the mode reg */
  71   1              /* Do not toggle ISOC endpoint */
  72   1              if((USB_EP[USB_EP1].attrib & USB_EP_TYPE_MASK) !=
  73   1                                                                                          USB_EP_TYPE_ISOC)
  74   1              {
  75   2                  USB_EP[USB_EP1].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
  76   2              }
  77   1              USB_EP[USB_EP1].apiEpState = USB_EVENT_PENDING;
  78   1              CY_SET_REG8(USB_SIE_EP_INT_SR_PTR, CY_GET_REG8(USB_SIE_EP_INT_SR_PTR) &
  79   1                                                                          (uint8)~USB_SIE_EP_INT_EP1_MASK);
  80   1      
  81   1              #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
  82   1                           USB_ISR_SERVICE_MIDI_OUT)
                          if(USB_midi_out_ep == USB_EP1)
                          {
                              USB_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USB_ISR_SERVICE_MIDI_OUT */
  88   1      
  89   1              /* `#START EP1_END_USER_CODE` Place your code here */
  90   1      
  91   1              /* `#END` */
  92   1      
  93   1              #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
  94   1                           USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
  97   1          }
  98          
  99          #endif   /*  USB_EP1_ISR_REMOVE */
 100          
 101          
 102          #if(USB_EP2_ISR_REMOVE == 0u)
 103          
 104              /*******************************************************************************
 105              * Function Name: USB_EP_2_ISR
 106              ********************************************************************************
 107              *
 108              * Summary:
 109              *  Endpoint 2 Interrupt Service Routine
 110              *
 111              * Parameters:
 112              *  None.
 113              *
 114              * Return:
 115              *  None.
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 3   

 116              *
 117              *******************************************************************************/
 118              CY_ISR(USB_EP_2_ISR)
 119              {
 120   1              #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
 121   1                           USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
 124   1      
 125   1              /* `#START EP2_USER_CODE` Place your code here */
 126   1      
 127   1              /* `#END` */
 128   1      
 129   1              #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
 130   1                           USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
 134   1      
 135   1              CY_GET_REG8(USB_SIE_EP2_CR0_PTR); /* Must read the mode reg */
 136   1              /* Do not toggle ISOC endpoint */
 137   1              if((USB_EP[USB_EP2].attrib & USB_EP_TYPE_MASK) !=
 138   1                                                                                          USB_EP_TYPE_ISOC)
 139   1              {
 140   2                  USB_EP[USB_EP2].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
 141   2              }
 142   1              USB_EP[USB_EP2].apiEpState = USB_EVENT_PENDING;
 143   1              CY_SET_REG8(USB_SIE_EP_INT_SR_PTR, CY_GET_REG8(USB_SIE_EP_INT_SR_PTR)
 144   1                                                                              & (uint8)~USB_SIE_EP_INT_EP2_MASK)
             -;
 145   1      
 146   1              #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
 147   1                           USB_ISR_SERVICE_MIDI_OUT)
                          if(USB_midi_out_ep == USB_EP2)
                          {
                              USB_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USB_ISR_SERVICE_MIDI_OUT */
 153   1      
 154   1              /* `#START EP2_END_USER_CODE` Place your code here */
 155   1      
 156   1              /* `#END` */
 157   1      
 158   1              #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
 159   1                           USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
 162   1          }
 163          
 164          #endif   /*  USB_EP2_ISR_REMOVE */
 165          
 166          
 167          #if(USB_EP3_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USB_EP_3_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 3 Interrupt Service Routine
                  *
                  * Parameters:
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 4   

                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USB_EP_3_ISR)
                  {
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
              
                      /* `#START EP3_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USB_SIE_EP3_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USB_EP[USB_EP3].attrib & USB_EP_TYPE_MASK) !=
                                                                                                  USB_EP_TYPE_ISOC)
                      {
                          USB_EP[USB_EP3].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                      }
                      USB_EP[USB_EP3].apiEpState = USB_EVENT_PENDING;
                      CY_SET_REG8(USB_SIE_EP_INT_SR_PTR, CY_GET_REG8(USB_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USB_SIE_EP_INT_EP3_MASK)
             -;
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT)
                          if(USB_midi_out_ep == USB_EP3)
                          {
                              USB_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USB_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP3_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
                  }
              
              #endif   /*  USB_EP3_ISR_REMOVE */
 230          
 231          
 232          #if(USB_EP4_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USB_EP_4_ISR
                  ********************************************************************************
                  *
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 5   

                  * Summary:
                  *  Endpoint 4 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USB_EP_4_ISR)
                  {
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
              
                      /* `#START EP4_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USB_SIE_EP4_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USB_EP[USB_EP4].attrib & USB_EP_TYPE_MASK) !=
                                                                                                  USB_EP_TYPE_ISOC)
                      {
                          USB_EP[USB_EP4].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                      }
                      USB_EP[USB_EP4].apiEpState = USB_EVENT_PENDING;
                      CY_SET_REG8(USB_SIE_EP_INT_SR_PTR, CY_GET_REG8(USB_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USB_SIE_EP_INT_EP4_MASK)
             -;
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT)
                          if(USB_midi_out_ep == USB_EP4)
                          {
                              USB_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USB_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP4_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
                  }
              
              #endif   /*  USB_EP4_ISR_REMOVE */
 295          
 296          
 297          #if(USB_EP5_ISR_REMOVE == 0u)
              
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 6   

                  /*******************************************************************************
                  * Function Name: USB_EP_5_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 5 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USB_EP_5_ISR)
                  {
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
              
                      /* `#START EP5_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USB_SIE_EP5_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USB_EP[USB_EP5].attrib & USB_EP_TYPE_MASK) !=
                                                                                                  USB_EP_TYPE_ISOC)
                      {
                          USB_EP[USB_EP5].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                      }
                      USB_EP[USB_EP5].apiEpState = USB_EVENT_PENDING;
                      CY_SET_REG8(USB_SIE_EP_INT_SR_PTR, CY_GET_REG8(USB_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USB_SIE_EP_INT_EP5_MASK)
             -;
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT)
                          if(USB_midi_out_ep == USB_EP5)
                          {
                              USB_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USB_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP5_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
                  }
              #endif   /*  USB_EP5_ISR_REMOVE */
 359          
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 7   

 360          
 361          #if(USB_EP6_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USB_EP_6_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 6 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USB_EP_6_ISR)
                  {
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
              
                      /* `#START EP6_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USB_SIE_EP6_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USB_EP[USB_EP6].attrib & USB_EP_TYPE_MASK) !=
                                                                                                  USB_EP_TYPE_ISOC)
                      {
                          USB_EP[USB_EP6].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                      }
                      USB_EP[USB_EP6].apiEpState = USB_EVENT_PENDING;
                      CY_SET_REG8(USB_SIE_EP_INT_SR_PTR, CY_GET_REG8(USB_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USB_SIE_EP_INT_EP6_MASK)
             -;
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT)
                          if(USB_midi_out_ep == USB_EP6)
                          {
                              USB_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USB_ISR_SERVICE_MIDI_OUT  */
              
                      /* `#START EP6_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 8   

                  }
              
              #endif   /*  USB_EP6_ISR_REMOVE */
 424          
 425          
 426          #if(USB_EP7_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USB_EP_7_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 7 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USB_EP_7_ISR)
                  {
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
              
                      /* `#START EP7_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USB_SIE_EP7_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USB_EP[USB_EP7].attrib & USB_EP_TYPE_MASK) !=
                                                                                                  USB_EP_TYPE_ISOC)
                      {
                          USB_EP[USB_EP7].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                      }
                      USB_EP[USB_EP7].apiEpState = USB_EVENT_PENDING;
                      CY_SET_REG8(USB_SIE_EP_INT_SR_PTR, CY_GET_REG8(USB_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USB_SIE_EP_INT_EP7_MASK)
             -;
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT)
                          if(USB_midi_out_ep == USB_EP7)
                          {
                              USB_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USB_ISR_SERVICE_MIDI_OUT  */
              
                      /* `#START EP7_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 9   

                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
                  }
              
              #endif   /*  USB_EP7_ISR_REMOVE */
 489          
 490          
 491          #if(USB_EP8_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USB_EP_8_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 8 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USB_EP_8_ISR)
                  {
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
              
                      /* `#START EP8_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USB_SIE_EP8_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USB_EP[USB_EP8].attrib & USB_EP_TYPE_MASK) !=
                                                                                                  USB_EP_TYPE_ISOC)
                      {
                          USB_EP[USB_EP8].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                      }
                      USB_EP[USB_EP8].apiEpState = USB_EVENT_PENDING;
                      CY_SET_REG8(USB_SIE_EP_INT_SR_PTR, CY_GET_REG8(USB_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USB_SIE_EP_INT_EP8_MASK)
             -;
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT)
                          if(USB_midi_out_ep == USB_EP8)
                          {
                              USB_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USB_ISR_SERVICE_MIDI_OUT */
              
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 10  

                      /* `#START EP8_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                                   USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USB_ISR_SERVICE_MIDI_OUT  */
                  }
              
              #endif   /*  USB_EP8_ISR_REMOVE */
 554          
 555          
 556          /*******************************************************************************
 557          * Function Name: USB_SOF_ISR
 558          ********************************************************************************
 559          *
 560          * Summary:
 561          *  Start of Frame Interrupt Service Routine
 562          *
 563          * Parameters:
 564          *  None.
 565          *
 566          * Return:
 567          *  None.
 568          *
 569          *******************************************************************************/
 570          CY_ISR(USB_SOF_ISR)
 571          {
 572   1          /* `#START SOF_USER_CODE` Place your code here */
 573   1      
 574   1          /* `#END` */
 575   1      }
 576          
 577          
 578          /*******************************************************************************
 579          * Function Name: USB_BUS_RESET_ISR
 580          ********************************************************************************
 581          *
 582          * Summary:
 583          *  USB Bus Reset Interrupt Service Routine.  Calls _Start with the same
 584          *  parameters as the last USER call to _Start
 585          *
 586          * Parameters:
 587          *  None.
 588          *
 589          * Return:
 590          *  None.
 591          *
 592          *******************************************************************************/
 593          CY_ISR(USB_BUS_RESET_ISR)
 594          {
 595   1          /* `#START BUS_RESET_USER_CODE` Place your code here */
 596   1      
 597   1          /* `#END` */
 598   1      
 599   1          USB_ReInitComponent();
 600   1      }
 601          
 602          
 603          #if((USB_EP_MM != USB__EP_MANUAL) && (USB_ARB_ISR_REMOVE == 0u))
              
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 11  

              
                  /*******************************************************************************
                  * Function Name: USB_ARB_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Arbiter Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  * Side effect:
                  *  Search for EP8 int_status will be much slower than search for EP1 int_status.
                  *
                  *******************************************************************************/
                  CY_ISR(USB_ARB_ISR)
                  {
                      uint8 int_status;
                      uint8 ep_status;
                      uint8 ep = USB_EP1;
                      uint8 ptr = 0u;
              
                      /* `#START ARB_BEGIN_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      int_status = USB_ARB_INT_SR_REG;                   /* read Arbiter Status Register */
                      USB_ARB_INT_SR_REG = int_status;                   /* Clear Serviced Interrupts */
              
                      while(int_status != 0u)
                      {
                          if((int_status & 1u) != 0u)  /* If EpX interrupt present */
                          {   /* read Endpoint Status Register */
                              ep_status  = CY_GET_REG8((reg8 *)(USB_ARB_EP1_SR_IND + ptr));
                              /* If In Buffer Full */
                              if((ep_status & USB_ARB_EPX_SR_IN_BUF_FULL) != 0u)
                              {
                                  if((USB_EP[ep].addr & USB_DIR_IN) != 0u)
                                  {
                                      /* Clear Data ready status */
                                      *(reg8 *)(USB_ARB_EP1_CFG_IND + ptr) &=
                                                                                  (uint8)~USB_ARB_EPX_CFG_IN_DATA_RDY;
                                      #if((USB_EP_MM == USB__EP_DMAAUTO) && (USB_EP_DMA_AUTO_OPT == 0u))
                                          /* Setup common area DMA with rest of the data */
                                          if(USB_inLength[ep] > USB_DMA_BYTES_PER_BURST)
                                          {
                                              USB_LoadNextInEP(ep, 0u);
                                          }
                                          else
                                          {
                                              USB_inBufFull[ep] = 1u;
                                          }
                                      #endif /* ((USB_EP_MM == USB__EP_DMAAUTO) && (USB_EP_DMA_AUTO_OPT == 0u)) */
                                      /* Write the Mode register */
                                      CY_SET_REG8((reg8 *)(USB_SIE_EP1_CR0_IND + ptr), USB_EP[ep].epMode);
                                      #if (defined(USB_ENABLE_MIDI_STREAMING) && USB_ISR_SERVICE_MIDI_IN)
                                          if(ep == USB_midi_in_ep)
                                          {   /* Clear MIDI input pointer */
                                              USB_midiInPointer = 0u;
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 12  

                                          }
                                      #endif /*  USB_ENABLE_MIDI_STREAMING*/
                                  }
                              }
                              /* (re)arm Out EP only for mode2 */
                              #if(USB_EP_MM != USB__EP_DMAAUTO)
                                  /* If DMA Grant */
                                  if((ep_status & USB_ARB_EPX_SR_DMA_GNT) != 0u)
                                  {
                                      if((USB_EP[ep].addr & USB_DIR_IN) == 0u)
                                      {
                                              USB_EP[ep].apiEpState = USB_NO_EVENT_PENDING;
                                              /* Write the Mode register */
                                              CY_SET_REG8((reg8 *)(USB_SIE_EP1_CR0_IND + ptr),
                                                                                                  USB_EP[ep].epMode);
                                      }
                                  }
                              #endif /*  USB_EP_MM */
              
                              /* `#START ARB_USER_CODE` Place your code here for handle Buffer Underflow/Overflow */
              
                              /* `#END` */
              
                              CY_SET_REG8((reg8 *)(USB_ARB_EP1_SR_IND + ptr), ep_status);   /* Clear Serviced events */
                          }
                          ptr += USB_EPX_CNTX_ADDR_OFFSET;               /* prepare pointer for next EP */
                          ep++;
                          int_status >>= 1u;
                      }
              
                      /* `#START ARB_END_USER_CODE` Place your code here */
              
                      /* `#END` */
                  }
              
              #endif /*  USB_EP_MM */
 703          
 704          #if ((USB_EP_MM == USB__EP_DMAAUTO) && (USB_EP_DMA_AUTO_OPT == 0u))
                  /******************************************************************************
                  * Function Name: USB_EP_DMA_DONE_ISR
                  *******************************************************************************
                  *
                  * Summary:
                  *  Endpoint 1 DMA Done Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  ******************************************************************************/
                  CY_ISR(USB_EP_DMA_DONE_ISR)
                  {
                      uint8 int8Status;
                      uint8 int17Status;
                      uint8 ep_status;
                      uint8 ep = USB_EP1;
                      uint8 ptr = 0u;
              
                      /* `#START EP_DMA_DONE_BEGIN_USER_CODE` Place your code here */
              
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 13  

                      /* `#END` */
              
                      /* Read clear on read status register with the EP source of interrupt */
                      int17Status = USB_EP17_DMA_Done_SR_Read() & USB_EP17_SR_MASK;
                      int8Status = USB_EP8_DMA_Done_SR_Read() & USB_EP8_SR_MASK;
              
                      while(int8Status != 0u)
                      {
                          while(int17Status != 0u)
                          {
                              if((int17Status & 1u) != 0u)  /* If EpX interrupt present */
                              {
                                  /* Read Endpoint Status Register */
                                  ep_status = CY_GET_REG8((reg8 *)(USB_ARB_EP1_SR_IND + ptr));
                                  if( ((ep_status & USB_ARB_EPX_SR_IN_BUF_FULL) == 0u) &&
                                      (USB_inBufFull[ep] == 0u))
                                  {
                                      /* `#START EP_DMA_DONE_USER_CODE` Place your code here */
              
                                      /* `#END` */
              
                                      CY_SET_REG8((reg8 *)(USB_ARB_RW1_WA_MSB_IND + ptr), 0x00u);
                                      /* repeat 2 last bytes to prefetch endpoint area */
                                      CY_SET_REG8((reg8 *)(USB_ARB_RW1_WA_IND + ptr),
                                                  USB_DMA_BYTES_PER_BURST * ep - USB_DMA_BYTES_REPEAT);
                                      USB_LoadNextInEP(ep, 1);
                                      /* Set Data ready status, This will generate DMA request */
                                      * (reg8 *)(USB_ARB_EP1_CFG_IND + ptr) |= USB_ARB_EPX_CFG_IN_DATA_RDY;
                                  }
                              }
                              ptr += USB_EPX_CNTX_ADDR_OFFSET;               /* prepare pointer for next EP */
                              ep++;
                              int17Status >>= 1u;
                          }
                          int8Status >>= 1u;
                          if(int8Status != 0)
                          {
                              /* Prepare pointer for EP8 */
                              ptr = ((USB_EP8 - USB_EP1) << USB_EPX_CNTX_ADDR_SHIFT);
                              ep = USB_EP8;
                              int17Status = int8Status & 0x01u;
                          }
                      }
              
                      /* `#START EP_DMA_DONE_END_USER_CODE` Place your code here */
              
                      /* `#END` */
                  }
              #endif /* ((USB_EP_MM == USB__EP_DMAAUTO) && (USB_EP_DMA_AUTO_OPT == 0u)) */
 778          
 779          
 780          /* [] END OF FILE */
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USB_EP_1_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0014 C0D0              PUSH    PSW
0016 75D000            MOV     PSW,#00H
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 70
001D 90600E            MOV     DPTR,#0600EH
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
                                           ; SOURCE LINE # 72
0022 900000      E     MOV     DPTR,#USB_EP+0BH
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 5403              ANL     A,#03H
002A FF                MOV     R7,A
002B 7E00              MOV     R6,#00H
002D EF                MOV     A,R7
002E 6401              XRL     A,#01H
0030 4E                ORL     A,R6
0031 600E              JZ      ?C0001
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
0033 900000      E     MOV     DPTR,#USB_EP+0EH
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 6480              XRL     A,#080H
003B FF                MOV     R7,A
003C 900000      E     MOV     DPTR,#USB_EP+0EH
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
0041         ?C0001:
                                           ; SOURCE LINE # 77
0041 900000      E     MOV     DPTR,#USB_EP+0CH
0044 7401              MOV     A,#01H
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
0047 90600B            MOV     DPTR,#0600BH
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 54FE              ANL     A,#0FEH
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
0052 D007              POP     AR7
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 15  

0054 D006              POP     AR6
0056 D0D0              POP     PSW
0058 D000        E     POP     ?C?XPAGE1SFR
005A D086              POP     DPS
005C D084              POP     DPL1
005E D085              POP     DPH1
0060 D082              POP     DPL
0062 D083              POP     DPH
0064 D0E0              POP     ACC
0066 32                RETI    
             ; FUNCTION USB_EP_1_ISR (END)

             ; FUNCTION USB_EP_2_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0014 C0D0              PUSH    PSW
0016 75D000            MOV     PSW,#00H
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 135
001D 90601E            MOV     DPTR,#0601EH
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
                                           ; SOURCE LINE # 137
0022 900000      E     MOV     DPTR,#USB_EP+016H
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 5403              ANL     A,#03H
002A FF                MOV     R7,A
002B 7E00              MOV     R6,#00H
002D EF                MOV     A,R7
002E 6401              XRL     A,#01H
0030 4E                ORL     A,R6
0031 600E              JZ      ?C0003
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
0033 900000      E     MOV     DPTR,#USB_EP+019H
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 6480              XRL     A,#080H
003B FF                MOV     R7,A
003C 900000      E     MOV     DPTR,#USB_EP+019H
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
0041         ?C0003:
                                           ; SOURCE LINE # 142
0041 900000      E     MOV     DPTR,#USB_EP+017H
0044 7401              MOV     A,#01H
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0047 90600B            MOV     DPTR,#0600BH
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 16  

004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 54FD              ANL     A,#0FDH
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
0052 D007              POP     AR7
0054 D006              POP     AR6
0056 D0D0              POP     PSW
0058 D000        E     POP     ?C?XPAGE1SFR
005A D086              POP     DPS
005C D084              POP     DPL1
005E D085              POP     DPH1
0060 D082              POP     DPL
0062 D083              POP     DPH
0064 D0E0              POP     ACC
0066 32                RETI    
             ; FUNCTION USB_EP_2_ISR (END)

             ; FUNCTION USB_SOF_ISR (BEGIN)
                                           ; SOURCE LINE # 570
                                           ; SOURCE LINE # 575
0000 32                RETI    
             ; FUNCTION USB_SOF_ISR (END)

             ; FUNCTION USB_BUS_RESET_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 599
002B 120000      E     LCALL   USB_ReInitComponent
                                           ; SOURCE LINE # 600
002E D007              POP     AR7
0030 D006              POP     AR6
0032 D005              POP     AR5
0034 D004              POP     AR4
0036 D003              POP     AR3
0038 D002              POP     AR2
003A D001              POP     AR1
003C D000              POP     AR0
003E D0D0              POP     PSW
0040 D000        E     POP     ?C?XPAGE1SFR
C51 COMPILER V9.51   USB_EPISR                                                             02/21/2017 15:19:25 PAGE 17  

0042 D086              POP     DPS
0044 D084              POP     DPL1
0046 D085              POP     DPH1
0048 D082              POP     DPL
004A D083              POP     DPH
004C D0F0              POP     B
004E D0E0              POP     ACC
0050 32                RETI    
             ; FUNCTION USB_BUS_RESET_ISR (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    288    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
